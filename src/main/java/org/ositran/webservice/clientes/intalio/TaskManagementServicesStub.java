/**
 * TaskManagementServicesStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.5.1  Built on : Oct 19, 2009 (10:59:00 EDT)
 */
package org.ositran.webservice.clientes.intalio;

import gob.ositran.siged.config.SigedProperties;
import java.util.HashMap;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamReader;

import org.apache.axis2.databinding.ADBException;
import org.apache.axis2.transport.http.HTTPConstants;

/*
 *  TaskManagementServicesStub java implementation
 */

public class TaskManagementServicesStub extends org.apache.axis2.client.Stub{
	protected org.apache.axis2.description.AxisOperation[] _operations;

	// hashmaps to keep the fault mapping
	private HashMap faultExceptionNameMap=new HashMap();
	private HashMap faultExceptionClassNameMap=new HashMap();
	private HashMap faultMessageMap=new HashMap();

	private static int counter=0;

	private static synchronized java.lang.String getUniqueSuffix(){
		// reset the counter if it is greater than 99999
		if(counter > 99999){
			counter=0;
		}
		counter=counter + 1;
		return java.lang.Long.toString(System.currentTimeMillis()) + "_" + counter;
	}

	private void populateAxisService() throws org.apache.axis2.AxisFault{

		// creating the Service with a unique name
		_service=new org.apache.axis2.description.AxisService("TaskManagementServices" + getUniqueSuffix());
		addAnonymousOperations();

		// creating the operations
		org.apache.axis2.description.AxisOperation __operation;

		_operations=new org.apache.axis2.description.AxisOperation[18];

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","deletePipa"));
		_service.addOperation(__operation);

		_operations[0]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getTask"));
		_service.addOperation(__operation);

		_operations[1]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","removeAttachment"));
		_service.addOperation(__operation);

		_operations[2]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getAvailableTasks"));
		_service.addOperation(__operation);

		_operations[3]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","create"));
		_service.addOperation(__operation);

		_operations[4]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","initProcess"));
		_service.addOperation(__operation);

		_operations[5]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","setOutput"));
		_service.addOperation(__operation);

		_operations[6]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reassign"));
		_service.addOperation(__operation);

		_operations[7]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","complete"));
		_service.addOperation(__operation);

		_operations[8]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","setOutputAndComplete"));
		_service.addOperation(__operation);

		_operations[9]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getAttachments"));
		_service.addOperation(__operation);

		_operations[10]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getPipa"));
		_service.addOperation(__operation);

		_operations[11]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","deleteAll"));
		_service.addOperation(__operation);

		_operations[12]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","addAttachment"));
		_service.addOperation(__operation);

		_operations[13]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","storePipa"));
		_service.addOperation(__operation);

		_operations[14]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getTaskList"));
		_service.addOperation(__operation);

		_operations[15]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","delete"));
		_service.addOperation(__operation);

		_operations[16]=__operation;

		__operation=new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","fail"));
		_service.addOperation(__operation);

		_operations[17]=__operation;

	}

	// populates the faults
	private void populateFaults(){

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableAttachmentFault"),"org.ositran.webservice.clientes.intalio.UnavailableAttachmentFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableAttachmentFault"),"org.ositran.webservice.clientes.intalio.UnavailableAttachmentFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableAttachmentFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableAttachmentFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.AccessDeniedFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.AccessDeniedFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$AccessDeniedFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.AccessDeniedFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.AccessDeniedFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$AccessDeniedFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.AccessDeniedFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.AccessDeniedFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$AccessDeniedFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.AccessDeniedFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.AccessDeniedFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$AccessDeniedFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidInputMessageFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$UnavailableTaskFault");

		faultExceptionNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException");
		faultMessageMap.put(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault"),"org.ositran.webservice.clientes.intalio.TaskManagementServicesStub$InvalidParticipantTokenFault");

	}

	/**
	 *Constructor that takes in a configContext
	 */

	public TaskManagementServicesStub(org.apache.axis2.context.ConfigurationContext configurationContext,java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault{
		this(configurationContext,targetEndpoint,false);
	}

	/**
	 * Constructor that takes in a configContext and useseperate listner
	 */
	public TaskManagementServicesStub(org.apache.axis2.context.ConfigurationContext configurationContext,java.lang.String targetEndpoint,boolean useSeparateListener) throws org.apache.axis2.AxisFault{
		// To populate AxisService
		populateAxisService();
		populateFaults();

		_serviceClient=new org.apache.axis2.client.ServiceClient(configurationContext,_service);

		_serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(targetEndpoint));
		_serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

		// Set the soap version
		_serviceClient.getOptions().setSoapVersionURI(org.apache.axiom.soap.SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
		_serviceClient.getOptions().setProperty(HTTPConstants.HTTP_PROTOCOL_VERSION,HTTPConstants.HEADER_PROTOCOL_10);
		_serviceClient.getOptions().setProperty(HTTPConstants.CHUNKED,Boolean.FALSE);
	}

	/**
	 * Default Constructor
	 */
	public TaskManagementServicesStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault{

		this(configurationContext,"http://"+SigedProperties.getProperty(SigedProperties.SigedPropertyEnum.INTALIO_HOST)+":"+SigedProperties.getProperty(SigedProperties.SigedPropertyEnum.INTALIO_PORT)+"/axis2/services/TaskManagementServices");

	}

	/**
	 * Default Constructor
	 */
	public TaskManagementServicesStub() throws org.apache.axis2.AxisFault{

		this("http://"+SigedProperties.getProperty(SigedProperties.SigedPropertyEnum.INTALIO_HOST)+":"+SigedProperties.getProperty(SigedProperties.SigedPropertyEnum.INTALIO_PORT)+"/axis2/services/TaskManagementServices");

	}

	/**
	 * Constructor taking the target endpoint
	 */
	public TaskManagementServicesStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault{
		this(null,targetEndpoint);
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#deletePipa
	 * @param deletePipaRequest12
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse deletePipa(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeletePipaRequest deletePipaRequest12)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[0].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/deletePipa");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),deletePipaRequest12,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","deletePipa")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startdeletePipa
	 * @param deletePipaRequest12
	 */
	public void startdeletePipa(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeletePipaRequest deletePipaRequest12,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[0].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/deletePipa");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),deletePipaRequest12,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","deletePipa")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultdeletePipa((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrordeletePipa(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrordeletePipa((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrordeletePipa((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrordeletePipa((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrordeletePipa(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeletePipa(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeletePipa(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeletePipa(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeletePipa(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeletePipa(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeletePipa(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeletePipa(f);
							}
						}
						else{
							callback.receiveErrordeletePipa(f);
						}
					}
					else{
						callback.receiveErrordeletePipa(f);
					}
				}
				else{
					callback.receiveErrordeletePipa(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrordeletePipa(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[0].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[0].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#getTask
	 * @param getTaskRequest14
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskResponse getTask(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskRequest getTaskRequest14)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[1].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/getTask");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),getTaskRequest14,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getTask")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startgetTask
	 * @param getTaskRequest14
	 */
	public void startgetTask(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskRequest getTaskRequest14,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[1].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/getTask");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),getTaskRequest14,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getTask")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetTask((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorgetTask(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorgetTask((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrorgetTask((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorgetTask((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorgetTask(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTask(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTask(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTask(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTask(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTask(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTask(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTask(f);
							}
						}
						else{
							callback.receiveErrorgetTask(f);
						}
					}
					else{
						callback.receiveErrorgetTask(f);
					}
				}
				else{
					callback.receiveErrorgetTask(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorgetTask(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[1].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[1].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#removeAttachment
	 * @param removeAttachmentRequest16
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableAttachmentFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse removeAttachment(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.RemoveAttachmentRequest removeAttachmentRequest16)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.UnavailableAttachmentFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[2].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/removeAttachment");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),removeAttachmentRequest16,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","removeAttachment")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableAttachmentFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableAttachmentFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startremoveAttachment
	 * @param removeAttachmentRequest16
	 */
	public void startremoveAttachment(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.RemoveAttachmentRequest removeAttachmentRequest16,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[2].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/removeAttachment");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),removeAttachmentRequest16,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","removeAttachment")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultremoveAttachment((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorremoveAttachment(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableAttachmentFaultException){
									callback.receiveErrorremoveAttachment((org.ositran.webservice.clientes.intalio.UnavailableAttachmentFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorremoveAttachment((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorremoveAttachment(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorremoveAttachment(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorremoveAttachment(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorremoveAttachment(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorremoveAttachment(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorremoveAttachment(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorremoveAttachment(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorremoveAttachment(f);
							}
						}
						else{
							callback.receiveErrorremoveAttachment(f);
						}
					}
					else{
						callback.receiveErrorremoveAttachment(f);
					}
				}
				else{
					callback.receiveErrorremoveAttachment(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorremoveAttachment(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[2].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[2].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#getAvailableTasks
	 * @param getAvailableTasksRequest18
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksResponse getAvailableTasks(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksRequest getAvailableTasksRequest18)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[3].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/getAvailableTasks");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),getAvailableTasksRequest18,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getAvailableTasks")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startgetAvailableTasks
	 * @param getAvailableTasksRequest18
	 */
	public void startgetAvailableTasks(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksRequest getAvailableTasksRequest18,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[3].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/getAvailableTasks");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),getAvailableTasksRequest18,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getAvailableTasks")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetAvailableTasks((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorgetAvailableTasks(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorgetAvailableTasks((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorgetAvailableTasks((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorgetAvailableTasks(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAvailableTasks(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAvailableTasks(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAvailableTasks(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAvailableTasks(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAvailableTasks(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAvailableTasks(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAvailableTasks(f);
							}
						}
						else{
							callback.receiveErrorgetAvailableTasks(f);
						}
					}
					else{
						callback.receiveErrorgetAvailableTasks(f);
					}
				}
				else{
					callback.receiveErrorgetAvailableTasks(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorgetAvailableTasks(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[3].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[3].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#create
	 * @param createRequest20
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.AccessDeniedFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse create(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CreateRequest createRequest20)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.AccessDeniedFaultException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[4].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/create");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),createRequest20,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","create")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.AccessDeniedFaultException){
							throw (org.ositran.webservice.clientes.intalio.AccessDeniedFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startcreate
	 * @param createRequest20
	 */
	public void startcreate(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CreateRequest createRequest20,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[4].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/create");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),createRequest20,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","create")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultcreate((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorcreate(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.AccessDeniedFaultException){
									callback.receiveErrorcreate((org.ositran.webservice.clientes.intalio.AccessDeniedFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorcreate((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorcreate((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorcreate(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcreate(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcreate(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcreate(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcreate(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcreate(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcreate(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcreate(f);
							}
						}
						else{
							callback.receiveErrorcreate(f);
						}
					}
					else{
						callback.receiveErrorcreate(f);
					}
				}
				else{
					callback.receiveErrorcreate(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorcreate(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[4].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[4].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#initProcess
	 * @param initRequest22
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse initProcess(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InitRequest initRequest22)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[5].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/init");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),initRequest22,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","initProcess")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startinitProcess
	 * @param initRequest22
	 */
	public void startinitProcess(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InitRequest initRequest22,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[5].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/init");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),initRequest22,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","initProcess")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultinitProcess((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorinitProcess(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorinitProcess((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrorinitProcess((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorinitProcess((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorinitProcess(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorinitProcess(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorinitProcess(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorinitProcess(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorinitProcess(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorinitProcess(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorinitProcess(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorinitProcess(f);
							}
						}
						else{
							callback.receiveErrorinitProcess(f);
						}
					}
					else{
						callback.receiveErrorinitProcess(f);
					}
				}
				else{
					callback.receiveErrorinitProcess(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorinitProcess(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[5].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[5].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#setOutput
	 * @param setOutputRequest24
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse setOutput(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputRequest setOutputRequest24)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[6].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/setOutput");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),setOutputRequest24,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","setOutput")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startsetOutput
	 * @param setOutputRequest24
	 */
	public void startsetOutput(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputRequest setOutputRequest24,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[6].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/setOutput");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),setOutputRequest24,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","setOutput")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultsetOutput((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorsetOutput(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorsetOutput((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrorsetOutput((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorsetOutput((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorsetOutput(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutput(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutput(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutput(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutput(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutput(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutput(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutput(f);
							}
						}
						else{
							callback.receiveErrorsetOutput(f);
						}
					}
					else{
						callback.receiveErrorsetOutput(f);
					}
				}
				else{
					callback.receiveErrorsetOutput(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorsetOutput(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[6].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[6].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#reassign
	 * @param reassignRequest26
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse reassign(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.ReassignRequest reassignRequest26)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[7].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/reassign");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),reassignRequest26,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reassign")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startreassign
	 * @param reassignRequest26
	 */
	public void startreassign(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.ReassignRequest reassignRequest26,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[7].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/reassign");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),reassignRequest26,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reassign")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultreassign((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorreassign(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorreassign((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrorreassign((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorreassign((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorreassign(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorreassign(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorreassign(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorreassign(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorreassign(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorreassign(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorreassign(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorreassign(f);
							}
						}
						else{
							callback.receiveErrorreassign(f);
						}
					}
					else{
						callback.receiveErrorreassign(f);
					}
				}
				else{
					callback.receiveErrorreassign(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorreassign(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[7].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[7].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#complete
	 * @param completeRequest28
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse complete(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CompleteRequest completeRequest28)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[8].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/complete");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),completeRequest28,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","complete")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startcomplete
	 * @param completeRequest28
	 */
	public void startcomplete(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CompleteRequest completeRequest28,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[8].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/complete");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),completeRequest28,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","complete")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultcomplete((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorcomplete(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorcomplete((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrorcomplete((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorcomplete((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorcomplete(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcomplete(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcomplete(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcomplete(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcomplete(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcomplete(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcomplete(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorcomplete(f);
							}
						}
						else{
							callback.receiveErrorcomplete(f);
						}
					}
					else{
						callback.receiveErrorcomplete(f);
					}
				}
				else{
					callback.receiveErrorcomplete(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorcomplete(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[8].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[8].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#setOutputAndComplete
	 * @param setOutputAndCompleteRequest30
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse setOutputAndComplete(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputAndCompleteRequest setOutputAndCompleteRequest30)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[9].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/setOutputAndComplete");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),setOutputAndCompleteRequest30,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","setOutputAndComplete")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startsetOutputAndComplete
	 * @param setOutputAndCompleteRequest30
	 */
	public void startsetOutputAndComplete(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputAndCompleteRequest setOutputAndCompleteRequest30,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[9].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/setOutputAndComplete");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),setOutputAndCompleteRequest30,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","setOutputAndComplete")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultsetOutputAndComplete((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorsetOutputAndComplete(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorsetOutputAndComplete((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrorsetOutputAndComplete((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorsetOutputAndComplete((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorsetOutputAndComplete(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutputAndComplete(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutputAndComplete(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutputAndComplete(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutputAndComplete(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutputAndComplete(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutputAndComplete(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorsetOutputAndComplete(f);
							}
						}
						else{
							callback.receiveErrorsetOutputAndComplete(f);
						}
					}
					else{
						callback.receiveErrorsetOutputAndComplete(f);
					}
				}
				else{
					callback.receiveErrorsetOutputAndComplete(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorsetOutputAndComplete(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[9].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[9].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#getAttachments
	 * @param getAttachmentsRequest32
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsResponse getAttachments(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsRequest getAttachmentsRequest32)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[10].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/getAttachments");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),getAttachmentsRequest32,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getAttachments")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startgetAttachments
	 * @param getAttachmentsRequest32
	 */
	public void startgetAttachments(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsRequest getAttachmentsRequest32,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[10].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/getAttachments");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),getAttachmentsRequest32,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getAttachments")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetAttachments((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorgetAttachments(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorgetAttachments((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrorgetAttachments((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorgetAttachments((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorgetAttachments(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAttachments(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAttachments(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAttachments(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAttachments(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAttachments(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAttachments(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetAttachments(f);
							}
						}
						else{
							callback.receiveErrorgetAttachments(f);
						}
					}
					else{
						callback.receiveErrorgetAttachments(f);
					}
				}
				else{
					callback.receiveErrorgetAttachments(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorgetAttachments(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[10].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[10].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#getPipa
	 * @param getPipaRequest34
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaResponse getPipa(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaRequest getPipaRequest34)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[11].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/getPipa");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),getPipaRequest34,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getPipa")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startgetPipa
	 * @param getPipaRequest34
	 */
	public void startgetPipa(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaRequest getPipaRequest34,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[11].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/getPipa");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),getPipaRequest34,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getPipa")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetPipa((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorgetPipa(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorgetPipa((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrorgetPipa((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorgetPipa((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorgetPipa(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPipa(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPipa(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPipa(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPipa(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPipa(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPipa(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPipa(f);
							}
						}
						else{
							callback.receiveErrorgetPipa(f);
						}
					}
					else{
						callback.receiveErrorgetPipa(f);
					}
				}
				else{
					callback.receiveErrorgetPipa(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorgetPipa(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[11].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[11].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#deleteAll
	 * @param deleteAllRequest36
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.AccessDeniedFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse deleteAll(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteAllRequest deleteAllRequest36)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.AccessDeniedFaultException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[12].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/deleteAll");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),deleteAllRequest36,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","deleteAll")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.AccessDeniedFaultException){
							throw (org.ositran.webservice.clientes.intalio.AccessDeniedFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startdeleteAll
	 * @param deleteAllRequest36
	 */
	public void startdeleteAll(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteAllRequest deleteAllRequest36,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[12].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/deleteAll");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),deleteAllRequest36,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","deleteAll")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultdeleteAll((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrordeleteAll(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.AccessDeniedFaultException){
									callback.receiveErrordeleteAll((org.ositran.webservice.clientes.intalio.AccessDeniedFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrordeleteAll((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrordeleteAll((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrordeleteAll((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrordeleteAll(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeleteAll(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeleteAll(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeleteAll(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeleteAll(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeleteAll(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeleteAll(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordeleteAll(f);
							}
						}
						else{
							callback.receiveErrordeleteAll(f);
						}
					}
					else{
						callback.receiveErrordeleteAll(f);
					}
				}
				else{
					callback.receiveErrordeleteAll(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrordeleteAll(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[12].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[12].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#addAttachment
	 * @param addAttachmentRequest38
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse addAttachment(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AddAttachmentRequest addAttachmentRequest38)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[13].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/addAttachment");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),addAttachmentRequest38,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","addAttachment")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startaddAttachment
	 * @param addAttachmentRequest38
	 */
	public void startaddAttachment(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AddAttachmentRequest addAttachmentRequest38,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[13].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/addAttachment");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),addAttachmentRequest38,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","addAttachment")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultaddAttachment((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErroraddAttachment(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErroraddAttachment((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErroraddAttachment((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErroraddAttachment((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErroraddAttachment(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddAttachment(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddAttachment(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddAttachment(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddAttachment(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddAttachment(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddAttachment(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddAttachment(f);
							}
						}
						else{
							callback.receiveErroraddAttachment(f);
						}
					}
					else{
						callback.receiveErroraddAttachment(f);
					}
				}
				else{
					callback.receiveErroraddAttachment(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErroraddAttachment(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[13].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[13].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#storePipa
	 * @param storePipaRequest40
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse storePipa(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.StorePipaRequest storePipaRequest40)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[14].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/storePipa");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),storePipaRequest40,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","storePipa")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startstorePipa
	 * @param storePipaRequest40
	 */
	public void startstorePipa(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.StorePipaRequest storePipaRequest40,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[14].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/storePipa");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),storePipaRequest40,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","storePipa")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultstorePipa((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorstorePipa(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorstorePipa((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorstorePipa((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorstorePipa(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorstorePipa(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorstorePipa(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorstorePipa(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorstorePipa(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorstorePipa(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorstorePipa(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorstorePipa(f);
							}
						}
						else{
							callback.receiveErrorstorePipa(f);
						}
					}
					else{
						callback.receiveErrorstorePipa(f);
					}
				}
				else{
					callback.receiveErrorstorePipa(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorstorePipa(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[14].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[14].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#getTaskList
	 * @param getTaskListRequest42
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListResponse getTaskList(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListRequest getTaskListRequest42)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[15].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/getTaskList");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),getTaskListRequest42,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getTaskList")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startgetTaskList
	 * @param getTaskListRequest42
	 */
	public void startgetTaskList(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListRequest getTaskListRequest42,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[15].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/getTaskList");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),getTaskListRequest42,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getTaskList")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetTaskList((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorgetTaskList(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorgetTaskList((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorgetTaskList((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorgetTaskList(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTaskList(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTaskList(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTaskList(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTaskList(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTaskList(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTaskList(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTaskList(f);
							}
						}
						else{
							callback.receiveErrorgetTaskList(f);
						}
					}
					else{
						callback.receiveErrorgetTaskList(f);
					}
				}
				else{
					callback.receiveErrorgetTaskList(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorgetTaskList(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[15].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[15].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#delete
	 * @param deleteRequest44
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.AccessDeniedFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse delete(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteRequest deleteRequest44)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.AccessDeniedFaultException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[16].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/delete");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),deleteRequest44,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","delete")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.AccessDeniedFaultException){
							throw (org.ositran.webservice.clientes.intalio.AccessDeniedFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startdelete
	 * @param deleteRequest44
	 */
	public void startdelete(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteRequest deleteRequest44,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[16].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/delete");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),deleteRequest44,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","delete")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultdelete((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrordelete(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.AccessDeniedFaultException){
									callback.receiveErrordelete((org.ositran.webservice.clientes.intalio.AccessDeniedFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrordelete((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrordelete((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrordelete((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrordelete(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordelete(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordelete(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordelete(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordelete(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordelete(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordelete(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrordelete(f);
							}
						}
						else{
							callback.receiveErrordelete(f);
						}
					}
					else{
						callback.receiveErrordelete(f);
					}
				}
				else{
					callback.receiveErrordelete(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrordelete(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[16].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[16].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#fail
	 * @param failRequest46
	 * 
	 * @throws org.ositran.webservice.clientes.intalio.AccessDeniedFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException
	 *             :
	 * @throws org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException
	 *             :
	 */

	public org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse fail(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.FailRequest failRequest46)

	throws java.rmi.RemoteException, org.ositran.webservice.clientes.intalio.AccessDeniedFaultException, org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException, org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException, org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException{
		org.apache.axis2.context.MessageContext _messageContext=null;
		try{
			org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[17].getName());
			_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/fail");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

			// create a message context
			_messageContext=new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env=null;

			env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),failRequest46,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","fail")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();

			java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(_returnEnv));

			return (org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object;

		}
		catch(org.apache.axis2.AxisFault f){

			org.apache.axiom.om.OMElement faultElt=f.getDetail();
			if(faultElt != null){
				if(faultExceptionNameMap.containsKey(faultElt.getQName())){
					// make the fault by reflection
					try{
						java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
						java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
						java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
						java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
						m.invoke(ex,new java.lang.Object[]{messageObject});

						if(ex instanceof org.ositran.webservice.clientes.intalio.AccessDeniedFaultException){
							throw (org.ositran.webservice.clientes.intalio.AccessDeniedFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
							throw (org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex;
						}

						if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
							throw (org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(),ex);
					}
					catch(java.lang.ClassCastException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.ClassNotFoundException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.NoSuchMethodException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.reflect.InvocationTargetException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.IllegalAccessException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
					catch(java.lang.InstantiationException e){
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				}
				else{
					throw f;
				}
			}
			else{
				throw f;
			}
		}
		finally{
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.ositran.webservice.clientes.intalio.TaskManagementServices#startfail
	 * @param failRequest46
	 */
	public void startfail(

	org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.FailRequest failRequest46,

	final org.ositran.webservice.clientes.intalio.TaskManagementServicesCallbackHandler callback)

	throws java.rmi.RemoteException{

		org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[17].getName());
		_operationClient.getOptions().setAction("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/fail");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env=null;
		final org.apache.axis2.context.MessageContext _messageContext=new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),failRequest46,optimizeContent(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","fail")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback(){
			public void onMessage(org.apache.axis2.context.MessageContext resultContext){
				try{
					org.apache.axiom.soap.SOAPEnvelope resultEnv=resultContext.getEnvelope();

					java.lang.Object object=fromOM(resultEnv.getBody().getFirstElement(),org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class,getEnvelopeNamespaces(resultEnv));
					callback.receiveResultfail((org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse) object);

				}
				catch(org.apache.axis2.AxisFault e){
					callback.receiveErrorfail(e);
				}
			}

			public void onError(java.lang.Exception error){
				if(error instanceof org.apache.axis2.AxisFault){
					org.apache.axis2.AxisFault f=(org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt=f.getDetail();
					if(faultElt != null){
						if(faultExceptionNameMap.containsKey(faultElt.getQName())){
							// make the fault by reflection
							try{
								java.lang.String exceptionClassName=(java.lang.String) faultExceptionClassNameMap.get(faultElt.getQName());
								java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex=(java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName=(java.lang.String) faultMessageMap.get(faultElt.getQName());
								java.lang.Class messageClass=java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject=fromOM(faultElt,messageClass,null);
								java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});
								m.invoke(ex,new java.lang.Object[]{messageObject});

								if(ex instanceof org.ositran.webservice.clientes.intalio.AccessDeniedFaultException){
									callback.receiveErrorfail((org.ositran.webservice.clientes.intalio.AccessDeniedFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException){
									callback.receiveErrorfail((org.ositran.webservice.clientes.intalio.InvalidInputMessageFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException){
									callback.receiveErrorfail((org.ositran.webservice.clientes.intalio.UnavailableTaskFaultException) ex);
									return;
								}

								if(ex instanceof org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException){
									callback.receiveErrorfail((org.ositran.webservice.clientes.intalio.InvalidParticipantTokenFaultException) ex);
									return;
								}

								callback.receiveErrorfail(new java.rmi.RemoteException(ex.getMessage(),ex));
							}
							catch(java.lang.ClassCastException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorfail(f);
							}
							catch(java.lang.ClassNotFoundException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorfail(f);
							}
							catch(java.lang.NoSuchMethodException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorfail(f);
							}
							catch(java.lang.reflect.InvocationTargetException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorfail(f);
							}
							catch(java.lang.IllegalAccessException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorfail(f);
							}
							catch(java.lang.InstantiationException e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorfail(f);
							}
							catch(org.apache.axis2.AxisFault e){
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorfail(f);
							}
						}
						else{
							callback.receiveErrorfail(f);
						}
					}
					else{
						callback.receiveErrorfail(f);
					}
				}
				else{
					callback.receiveErrorfail(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext){
				org.apache.axis2.AxisFault fault=org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete(){
				try{
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				}
				catch(org.apache.axis2.AxisFault axisFault){
					callback.receiveErrorfail(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver=null;
		if(_operations[17].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()){
			_callbackReceiver=new org.apache.axis2.util.CallbackReceiver();
			_operations[17].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * A utility method that copies the namepaces from the SOAPEnvelope
	 */
	private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
		java.util.Map returnMap=new HashMap();
		java.util.Iterator namespaceIterator=env.getAllDeclaredNamespaces();
		while(namespaceIterator.hasNext()){
			org.apache.axiom.om.OMNamespace ns=(org.apache.axiom.om.OMNamespace) namespaceIterator.next();
			returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
		}
		return returnMap;
	}

	private javax.xml.namespace.QName[] opNameArray=null;

	private boolean optimizeContent(javax.xml.namespace.QName opName){

		if(opNameArray == null){
			return false;
		}
		for(int i=0;i < opNameArray.length;i++){
			if(opName.equals(opNameArray[i])){
				return true;
			}
		}
		return false;
	}

	// http://11.160.124.247:8080/axis2/services/TaskManagementServices
	public static class GetTaskRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getTaskRequest","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId
		 */

		protected java.lang.String localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTaskId(){
			return localTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(java.lang.String param){

			this.localTaskId=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected java.lang.String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(java.lang.String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					GetTaskRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":getTaskRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","getTaskRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskId",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskId");
				}

			}
			else{
				xmlWriter.writeStartElement("taskId");
			}

			if(localTaskId == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskId);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));

			if(localTaskId != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GetTaskRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetTaskRequest object=new GetTaskRequest();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"getTaskRequest".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetTaskRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class SetOutputRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","setOutputRequest","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId
		 */

		protected java.lang.String localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTaskId(){
			return localTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(java.lang.String param){

			this.localTaskId=param;

		}

		/**
		 * field for Data
		 */

		protected Data_type0 localData;

		/**
		 * Auto generated getter method
		 * 
		 * @return Data_type0
		 */
		public Data_type0 getData(){
			return localData;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Data
		 */
		public void setData(Data_type0 param){

			this.localData=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected java.lang.String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(java.lang.String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					SetOutputRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":setOutputRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","setOutputRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskId",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskId");
				}

			}
			else{
				xmlWriter.writeStartElement("taskId");
			}

			if(localTaskId == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskId);

			}

			xmlWriter.writeEndElement();

			if(localData == null){
				throw new org.apache.axis2.databinding.ADBException("data cannot be null!!");
			}
			localData.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","data"),factory,xmlWriter);

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));

			if(localTaskId != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","data"));

			if(localData == null){
				throw new org.apache.axis2.databinding.ADBException("data cannot be null!!");
			}
			elementList.add(localData);

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static SetOutputRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				SetOutputRequest object=new SetOutputRequest();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"setOutputRequest".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SetOutputRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","data").equals(reader.getName())){

						object.setData(Data_type0.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetAvailableTasksResponse implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getAvailableTasksResponse","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Task This was an Array!
		 */

		protected TaskMetadata[] localTask;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTaskTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return TaskMetadata[]
		 */
		public TaskMetadata[] getTask(){
			return localTask;
		}

		/**
		 * validate the array for Task
		 */
		protected void validateTask(TaskMetadata[] param){

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Task
		 */
		public void setTask(TaskMetadata[] param){

			validateTask(param);

			if(param != null){
				// update the setting tracker
				localTaskTracker=true;
			}
			else{
				localTaskTracker=false;

			}

			this.localTask=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            TaskMetadata
		 */
		public void addTask(TaskMetadata param){
			if(localTask == null){
				localTask=new TaskMetadata[]{};
			}

			// update the setting tracker
			localTaskTracker=true;

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localTask);
			list.add(param);
			this.localTask=(TaskMetadata[]) list.toArray(new TaskMetadata[list.size()]);

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					GetAvailableTasksResponse.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":getAvailableTasksResponse",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","getAvailableTasksResponse",xmlWriter);
				}

			}
			if(localTaskTracker){
				if(localTask != null){
					for(int i=0;i < localTask.length;i++){
						if(localTask[i] != null){
							localTask[i].serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"),factory,xmlWriter);
						}
						else{

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localTaskTracker){
				if(localTask != null){
					for(int i=0;i < localTask.length;i++){

						if(localTask[i] != null){
							elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"));
							elementList.add(localTask[i]);
						}
						else{

							// nothing to do

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GetAvailableTasksResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetAvailableTasksResponse object=new GetAvailableTasksResponse();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"getAvailableTasksResponse".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetAvailableTasksResponse) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list1=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task").equals(reader.getName())){

						// Process the array and step past its final element's
						// end.
						list1.add(TaskMetadata.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1=false;
						while(!loopDone1){
							// We should be at the end element, but make sure
							while(!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task").equals(reader.getName())){
									list1.add(TaskMetadata.Factory.parse(reader));

								}
								else{
									loopDone1=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setTask((TaskMetadata[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(TaskMetadata.class,list1));

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class UnavailableTaskFault implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskFault","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Reason
		 */

		protected java.lang.String localReason;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getReason(){
			return localReason;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Reason
		 */
		public void setReason(java.lang.String param){

			this.localReason=param;

		}

		/**
		 * field for UnavailableTaskId This was an Array!
		 */

		protected java.lang.String[] localUnavailableTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getUnavailableTaskId(){
			return localUnavailableTaskId;
		}

		/**
		 * validate the array for UnavailableTaskId
		 */
		protected void validateUnavailableTaskId(java.lang.String[] param){

			if((param != null) && (param.length < 1)){
				throw new java.lang.RuntimeException();
			}

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UnavailableTaskId
		 */
		public void setUnavailableTaskId(java.lang.String[] param){

			validateUnavailableTaskId(param);

			this.localUnavailableTaskId=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addUnavailableTaskId(java.lang.String param){
			if(localUnavailableTaskId == null){
				localUnavailableTaskId=new java.lang.String[]{};
			}

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localUnavailableTaskId);
			list.add(param);
			this.localUnavailableTaskId=(java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					UnavailableTaskFault.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":unavailableTaskFault",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","unavailableTaskFault",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"reason",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"reason");
				}

			}
			else{
				xmlWriter.writeStartElement("reason");
			}

			if(localReason == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("reason cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localReason);

			}

			xmlWriter.writeEndElement();

			if(localUnavailableTaskId != null){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				boolean emptyNamespace=namespace == null || namespace.length() == 0;
				prefix=emptyNamespace ? null : xmlWriter.getPrefix(namespace);
				for(int i=0;i < localUnavailableTaskId.length;i++){

					if(localUnavailableTaskId[i] != null){

						if(!emptyNamespace){
							if(prefix == null){
								java.lang.String prefix2=generatePrefix(namespace);

								xmlWriter.writeStartElement(prefix2,"unavailableTaskId",namespace);
								xmlWriter.writeNamespace(prefix2,namespace);
								xmlWriter.setPrefix(prefix2,namespace);

							}
							else{
								xmlWriter.writeStartElement(namespace,"unavailableTaskId");
							}

						}
						else{
							xmlWriter.writeStartElement("unavailableTaskId");
						}

						xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnavailableTaskId[i]));

						xmlWriter.writeEndElement();

					}
					else{

						throw new org.apache.axis2.databinding.ADBException("unavailableTaskId cannot be null!!");

					}

				}
			}
			else{

				throw new org.apache.axis2.databinding.ADBException("unavailableTaskId cannot be null!!");

			}

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reason"));

			if(localReason != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReason));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("reason cannot be null!!");
			}

			if(localUnavailableTaskId != null){
				for(int i=0;i < localUnavailableTaskId.length;i++){

					if(localUnavailableTaskId[i] != null){
						elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskId"));
						elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnavailableTaskId[i]));
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("unavailableTaskId cannot be null!!");

					}

				}
			}
			else{

				throw new org.apache.axis2.databinding.ADBException("unavailableTaskId cannot be null!!");

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static UnavailableTaskFault parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				UnavailableTaskFault object=new UnavailableTaskFault();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"unavailableTaskFault".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (UnavailableTaskFault) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list2=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reason").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setReason(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskId").equals(reader.getName())){

						// Process the array and step past its final element's
						// end.
						list2.add(reader.getElementText());

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone2=false;
						while(!loopDone2){
							// Ensure we are at the EndElement
							while(!reader.isEndElement()){
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone2=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableTaskId").equals(reader.getName())){
									list2.add(reader.getElementText());

								}
								else{
									loopDone2=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setUnavailableTaskId((java.lang.String[]) list2.toArray(new java.lang.String[list2.size()]));

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetAttachmentsResponse implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getAttachmentsResponse","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Attachment This was an Array!
		 */

		protected Attachment[] localAttachment;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAttachmentTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return Attachment[]
		 */
		public Attachment[] getAttachment(){
			return localAttachment;
		}

		/**
		 * validate the array for Attachment
		 */
		protected void validateAttachment(Attachment[] param){

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Attachment
		 */
		public void setAttachment(Attachment[] param){

			validateAttachment(param);

			if(param != null){
				// update the setting tracker
				localAttachmentTracker=true;
			}
			else{
				localAttachmentTracker=false;

			}

			this.localAttachment=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Attachment
		 */
		public void addAttachment(Attachment param){
			if(localAttachment == null){
				localAttachment=new Attachment[]{};
			}

			// update the setting tracker
			localAttachmentTracker=true;

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localAttachment);
			list.add(param);
			this.localAttachment=(Attachment[]) list.toArray(new Attachment[list.size()]);

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					GetAttachmentsResponse.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":getAttachmentsResponse",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","getAttachmentsResponse",xmlWriter);
				}

			}
			if(localAttachmentTracker){
				if(localAttachment != null){
					for(int i=0;i < localAttachment.length;i++){
						if(localAttachment[i] != null){
							localAttachment[i].serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachment"),factory,xmlWriter);
						}
						else{

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("attachment cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localAttachmentTracker){
				if(localAttachment != null){
					for(int i=0;i < localAttachment.length;i++){

						if(localAttachment[i] != null){
							elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachment"));
							elementList.add(localAttachment[i]);
						}
						else{

							// nothing to do

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("attachment cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GetAttachmentsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetAttachmentsResponse object=new GetAttachmentsResponse();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"getAttachmentsResponse".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetAttachmentsResponse) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list1=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachment").equals(reader.getName())){

						// Process the array and step past its final element's
						// end.
						list1.add(Attachment.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1=false;
						while(!loopDone1){
							// We should be at the end element, but make sure
							while(!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachment").equals(reader.getName())){
									list1.add(Attachment.Factory.parse(reader));

								}
								else{
									loopDone1=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setAttachment((Attachment[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(Attachment.class,list1));

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddAttachmentRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","addAttachmentRequest","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId
		 */

		protected java.lang.String localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTaskId(){
			return localTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(java.lang.String param){

			this.localTaskId=param;

		}

		/**
		 * field for Attachment
		 */

		protected Attachment localAttachment;

		/**
		 * Auto generated getter method
		 * 
		 * @return Attachment
		 */
		public Attachment getAttachment(){
			return localAttachment;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Attachment
		 */
		public void setAttachment(Attachment param){

			this.localAttachment=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected java.lang.String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(java.lang.String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					AddAttachmentRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":addAttachmentRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","addAttachmentRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskId",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskId");
				}

			}
			else{
				xmlWriter.writeStartElement("taskId");
			}

			if(localTaskId == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskId);

			}

			xmlWriter.writeEndElement();

			if(localAttachment == null){
				throw new org.apache.axis2.databinding.ADBException("attachment cannot be null!!");
			}
			localAttachment.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachment"),factory,xmlWriter);

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));

			if(localTaskId != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachment"));

			if(localAttachment == null){
				throw new org.apache.axis2.databinding.ADBException("attachment cannot be null!!");
			}
			elementList.add(localAttachment);

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AddAttachmentRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				AddAttachmentRequest object=new AddAttachmentRequest();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"addAttachmentRequest".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AddAttachmentRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachment").equals(reader.getName())){

						object.setAttachment(Attachment.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DeletePipaRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","deletePipaRequest","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Pipaurl
		 */

		protected java.lang.String localPipaurl;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPipaurl(){
			return localPipaurl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pipaurl
		 */
		public void setPipaurl(java.lang.String param){

			this.localPipaurl=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected java.lang.String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(java.lang.String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					DeletePipaRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":deletePipaRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","deletePipaRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"pipaurl",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"pipaurl");
				}

			}
			else{
				xmlWriter.writeStartElement("pipaurl");
			}

			if(localPipaurl == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("pipaurl cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localPipaurl);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","pipaurl"));

			if(localPipaurl != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPipaurl));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("pipaurl cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static DeletePipaRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				DeletePipaRequest object=new DeletePipaRequest();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"deletePipaRequest".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DeletePipaRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","pipaurl").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setPipaurl(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Input_type1 implements org.apache.axis2.databinding.ADBBean{
		/*
		 * This type was generated from the piece of schema that had name =
		 * input_type1 Namespace URI =
		 * http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/
		 * Namespace Prefix = ns1
		 */

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for ExtraElement This was an Array!
		 */

		protected org.apache.axiom.om.OMElement[] localExtraElement;

		/**
		 * Auto generated getter method
		 * 
		 * @return org.apache.axiom.om.OMElement[]
		 */
		public org.apache.axiom.om.OMElement[] getExtraElement(){
			return localExtraElement;
		}

		/**
		 * validate the array for ExtraElement
		 */
		protected void validateExtraElement(org.apache.axiom.om.OMElement[] param){

			if((param != null) && (param.length < 1)){
				throw new java.lang.RuntimeException();
			}

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ExtraElement
		 */
		public void setExtraElement(org.apache.axiom.om.OMElement[] param){

			validateExtraElement(param);

			this.localExtraElement=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            org.apache.axiom.om.OMElement
		 */
		public void addExtraElement(org.apache.axiom.om.OMElement param){
			if(localExtraElement == null){
				localExtraElement=new org.apache.axiom.om.OMElement[]{};
			}

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraElement);
			list.add(param);
			this.localExtraElement=(org.apache.axiom.om.OMElement[]) list.toArray(new org.apache.axiom.om.OMElement[list.size()]);

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					Input_type1.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":input_type1",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","input_type1",xmlWriter);
				}

			}

			if(localExtraElement != null){
				for(int i=0;i < localExtraElement.length;i++){
					if(localExtraElement[i] != null){
						localExtraElement[i].serialize(xmlWriter);
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");

					}
				}
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
			}

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localExtraElement != null){
				for(int i=0;i < localExtraElement.length;i++){
					if(localExtraElement[i] != null){
						elementList.add(new javax.xml.namespace.QName("","extraElement"));
						elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExtraElement[i]));
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");

					}

				}
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Input_type1 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				Input_type1 object=new Input_type1();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"input_type1".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Input_type1) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list1=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement()){

						// Process the array and step past its final element's
						// end.

						boolean loopDone1=false;

						while(!loopDone1){
							event=reader.getEventType();
							if(javax.xml.stream.XMLStreamConstants.START_ELEMENT == event){

								// We need to wrap the reader so that it
								// produces a fake START_DOCUEMENT event
								org.apache.axis2.databinding.utils.NamedStaxOMBuilder builder1=new org.apache.axis2.databinding.utils.NamedStaxOMBuilder(new org.apache.axis2.util.StreamWrapper(reader),reader.getName());

								list1.add(builder1.getOMElement());
								reader.next();
								if(reader.isEndElement()){
									// we have two countinuos end elements
									loopDone1=true;
								}

							}
							else if(javax.xml.stream.XMLStreamConstants.END_ELEMENT == event){
								loopDone1=true;
							}
							else{
								reader.next();
							}

						}

						object.setExtraElement((org.apache.axiom.om.OMElement[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.apache.axiom.om.OMElement.class,list1));

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AccessDeniedFault implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","accessDeniedFault","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Reason
		 */

		protected java.lang.String localReason;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getReason(){
			return localReason;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Reason
		 */
		public void setReason(java.lang.String param){

			this.localReason=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					AccessDeniedFault.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":accessDeniedFault",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","accessDeniedFault",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"reason",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"reason");
				}

			}
			else{
				xmlWriter.writeStartElement("reason");
			}

			if(localReason == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("reason cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localReason);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reason"));

			if(localReason != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReason));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("reason cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AccessDeniedFault parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				AccessDeniedFault object=new AccessDeniedFault();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"accessDeniedFault".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AccessDeniedFault) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reason").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setReason(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Input_type0 implements org.apache.axis2.databinding.ADBBean{
		/*
		 * This type was generated from the piece of schema that had name =
		 * input_type0 Namespace URI =
		 * http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/
		 * Namespace Prefix = ns1
		 */

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for ExtraElement This was an Array!
		 */

		protected org.apache.axiom.om.OMElement[] localExtraElement;

		/**
		 * Auto generated getter method
		 * 
		 * @return org.apache.axiom.om.OMElement[]
		 */
		public org.apache.axiom.om.OMElement[] getExtraElement(){
			return localExtraElement;
		}

		/**
		 * validate the array for ExtraElement
		 */
		protected void validateExtraElement(org.apache.axiom.om.OMElement[] param){

			if((param != null) && (param.length < 1)){
				throw new java.lang.RuntimeException();
			}

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ExtraElement
		 */
		public void setExtraElement(org.apache.axiom.om.OMElement[] param){

			validateExtraElement(param);

			this.localExtraElement=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            org.apache.axiom.om.OMElement
		 */
		public void addExtraElement(org.apache.axiom.om.OMElement param){
			if(localExtraElement == null){
				localExtraElement=new org.apache.axiom.om.OMElement[]{};
			}

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraElement);
			list.add(param);
			this.localExtraElement=(org.apache.axiom.om.OMElement[]) list.toArray(new org.apache.axiom.om.OMElement[list.size()]);

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					Input_type0.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":input_type0",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","input_type0",xmlWriter);
				}

			}

			if(localExtraElement != null){
				for(int i=0;i < localExtraElement.length;i++){
					if(localExtraElement[i] != null){
						localExtraElement[i].serialize(xmlWriter);
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");

					}
				}
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
			}

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localExtraElement != null){
				for(int i=0;i < localExtraElement.length;i++){
					if(localExtraElement[i] != null){
						elementList.add(new javax.xml.namespace.QName("","extraElement"));
						elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExtraElement[i]));
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");

					}

				}
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Input_type0 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				Input_type0 object=new Input_type0();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"input_type0".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Input_type0) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list1=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement()){

						// Process the array and step past its final element's
						// end.

						boolean loopDone1=false;

						while(!loopDone1){
							event=reader.getEventType();
							if(javax.xml.stream.XMLStreamConstants.START_ELEMENT == event){

								// We need to wrap the reader so that it
								// produces a fake START_DOCUEMENT event
								org.apache.axis2.databinding.utils.NamedStaxOMBuilder builder1=new org.apache.axis2.databinding.utils.NamedStaxOMBuilder(new org.apache.axis2.util.StreamWrapper(reader),reader.getName());

								list1.add(builder1.getOMElement());
								reader.next();
								if(reader.isEndElement()){
									// we have two countinuos end elements
									loopDone1=true;
								}

							}
							else if(javax.xml.stream.XMLStreamConstants.END_ELEMENT == event){
								loopDone1=true;
							}
							else{
								reader.next();
							}

						}

						object.setExtraElement((org.apache.axiom.om.OMElement[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.apache.axiom.om.OMElement.class,list1));

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DeleteRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","deleteRequest","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId This was an Array!
		 */

		protected java.lang.String[] localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getTaskId(){
			return localTaskId;
		}

		/**
		 * validate the array for TaskId
		 */
		protected void validateTaskId(java.lang.String[] param){

			if((param != null) && (param.length < 1)){
				throw new java.lang.RuntimeException();
			}

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(java.lang.String[] param){

			validateTaskId(param);

			this.localTaskId=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addTaskId(java.lang.String param){
			if(localTaskId == null){
				localTaskId=new java.lang.String[]{};
			}

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localTaskId);
			list.add(param);
			this.localTaskId=(java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 * field for ParticipantToken
		 */

		protected java.lang.String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(java.lang.String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					DeleteRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":deleteRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","deleteRequest",xmlWriter);
				}

			}

			if(localTaskId != null){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				boolean emptyNamespace=namespace == null || namespace.length() == 0;
				prefix=emptyNamespace ? null : xmlWriter.getPrefix(namespace);
				for(int i=0;i < localTaskId.length;i++){

					if(localTaskId[i] != null){

						if(!emptyNamespace){
							if(prefix == null){
								java.lang.String prefix2=generatePrefix(namespace);

								xmlWriter.writeStartElement(prefix2,"taskId",namespace);
								xmlWriter.writeNamespace(prefix2,namespace);
								xmlWriter.setPrefix(prefix2,namespace);

							}
							else{
								xmlWriter.writeStartElement(namespace,"taskId");
							}

						}
						else{
							xmlWriter.writeStartElement("taskId");
						}

						xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId[i]));

						xmlWriter.writeEndElement();

					}
					else{

						throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

					}

				}
			}
			else{

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localTaskId != null){
				for(int i=0;i < localTaskId.length;i++){

					if(localTaskId[i] != null){
						elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));
						elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId[i]));
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

					}

				}
			}
			else{

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static DeleteRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				DeleteRequest object=new DeleteRequest();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"deleteRequest".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DeleteRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list1=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						// Process the array and step past its final element's
						// end.
						list1.add(reader.getElementText());

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1=false;
						while(!loopDone1){
							// Ensure we are at the EndElement
							while(!reader.isEndElement()){
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){
									list1.add(reader.getElementText());

								}
								else{
									loopDone1=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setTaskId((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Data_type0 implements org.apache.axis2.databinding.ADBBean{
		/*
		 * This type was generated from the piece of schema that had name =
		 * data_type0 Namespace URI =
		 * http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/
		 * Namespace Prefix = ns1
		 */

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for ExtraElement This was an Array!
		 */

		protected org.apache.axiom.om.OMElement[] localExtraElement;

		/**
		 * Auto generated getter method
		 * 
		 * @return org.apache.axiom.om.OMElement[]
		 */
		public org.apache.axiom.om.OMElement[] getExtraElement(){
			return localExtraElement;
		}

		/**
		 * validate the array for ExtraElement
		 */
		protected void validateExtraElement(org.apache.axiom.om.OMElement[] param){

			if((param != null) && (param.length < 1)){
				throw new java.lang.RuntimeException();
			}

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ExtraElement
		 */
		public void setExtraElement(org.apache.axiom.om.OMElement[] param){

			validateExtraElement(param);

			this.localExtraElement=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            org.apache.axiom.om.OMElement
		 */
		public void addExtraElement(org.apache.axiom.om.OMElement param){
			if(localExtraElement == null){
				localExtraElement=new org.apache.axiom.om.OMElement[]{};
			}

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraElement);
			list.add(param);
			this.localExtraElement=(org.apache.axiom.om.OMElement[]) list.toArray(new org.apache.axiom.om.OMElement[list.size()]);

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					Data_type0.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":data_type0",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","data_type0",xmlWriter);
				}

			}

			if(localExtraElement != null){
				for(int i=0;i < localExtraElement.length;i++){
					if(localExtraElement[i] != null){
						localExtraElement[i].serialize(xmlWriter);
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");

					}
				}
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
			}

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localExtraElement != null){
				for(int i=0;i < localExtraElement.length;i++){
					if(localExtraElement[i] != null){
						elementList.add(new javax.xml.namespace.QName("","extraElement"));
						elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExtraElement[i]));
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");

					}

				}
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Data_type0 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				Data_type0 object=new Data_type0();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"data_type0".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Data_type0) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list1=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement()){

						// Process the array and step past its final element's
						// end.

						boolean loopDone1=false;

						while(!loopDone1){
							event=reader.getEventType();
							if(javax.xml.stream.XMLStreamConstants.START_ELEMENT == event){

								// We need to wrap the reader so that it
								// produces a fake START_DOCUEMENT event
								org.apache.axis2.databinding.utils.NamedStaxOMBuilder builder1=new org.apache.axis2.databinding.utils.NamedStaxOMBuilder(new org.apache.axis2.util.StreamWrapper(reader),reader.getName());

								list1.add(builder1.getOMElement());
								reader.next();
								if(reader.isEndElement()){
									// we have two countinuos end elements
									loopDone1=true;
								}

							}
							else if(javax.xml.stream.XMLStreamConstants.END_ELEMENT == event){
								loopDone1=true;
							}
							else{
								reader.next();
							}

						}

						object.setExtraElement((org.apache.axiom.om.OMElement[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.apache.axiom.om.OMElement.class,list1));

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class SetOutputAndCompleteRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","setOutputAndCompleteRequest","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId
		 */

		protected java.lang.String localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTaskId(){
			return localTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(java.lang.String param){

			this.localTaskId=param;

		}

		/**
		 * field for Data
		 */

		protected Data_type1 localData;

		/**
		 * Auto generated getter method
		 * 
		 * @return Data_type1
		 */
		public Data_type1 getData(){
			return localData;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Data
		 */
		public void setData(Data_type1 param){

			this.localData=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected java.lang.String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(java.lang.String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					SetOutputAndCompleteRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":setOutputAndCompleteRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","setOutputAndCompleteRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskId",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskId");
				}

			}
			else{
				xmlWriter.writeStartElement("taskId");
			}

			if(localTaskId == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskId);

			}

			xmlWriter.writeEndElement();

			if(localData == null){
				throw new org.apache.axis2.databinding.ADBException("data cannot be null!!");
			}
			localData.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","data"),factory,xmlWriter);

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));

			if(localTaskId != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","data"));

			if(localData == null){
				throw new org.apache.axis2.databinding.ADBException("data cannot be null!!");
			}
			elementList.add(localData);

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static SetOutputAndCompleteRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				SetOutputAndCompleteRequest object=new SetOutputAndCompleteRequest();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"setOutputAndCompleteRequest".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SetOutputAndCompleteRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","data").equals(reader.getName())){

						object.setData(Data_type1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Data_type1 implements org.apache.axis2.databinding.ADBBean{
		/*
		 * This type was generated from the piece of schema that had name =
		 * data_type1 Namespace URI =
		 * http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/
		 * Namespace Prefix = ns1
		 */

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for ExtraElement This was an Array!
		 */

		protected org.apache.axiom.om.OMElement[] localExtraElement;

		/**
		 * Auto generated getter method
		 * 
		 * @return org.apache.axiom.om.OMElement[]
		 */
		public org.apache.axiom.om.OMElement[] getExtraElement(){
			return localExtraElement;
		}

		/**
		 * validate the array for ExtraElement
		 */
		protected void validateExtraElement(org.apache.axiom.om.OMElement[] param){

			if((param != null) && (param.length < 1)){
				throw new java.lang.RuntimeException();
			}

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ExtraElement
		 */
		public void setExtraElement(org.apache.axiom.om.OMElement[] param){

			validateExtraElement(param);

			this.localExtraElement=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            org.apache.axiom.om.OMElement
		 */
		public void addExtraElement(org.apache.axiom.om.OMElement param){
			if(localExtraElement == null){
				localExtraElement=new org.apache.axiom.om.OMElement[]{};
			}

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraElement);
			list.add(param);
			this.localExtraElement=(org.apache.axiom.om.OMElement[]) list.toArray(new org.apache.axiom.om.OMElement[list.size()]);

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					Data_type1.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":data_type1",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","data_type1",xmlWriter);
				}

			}

			if(localExtraElement != null){
				for(int i=0;i < localExtraElement.length;i++){
					if(localExtraElement[i] != null){
						localExtraElement[i].serialize(xmlWriter);
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");

					}
				}
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
			}

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localExtraElement != null){
				for(int i=0;i < localExtraElement.length;i++){
					if(localExtraElement[i] != null){
						elementList.add(new javax.xml.namespace.QName("","extraElement"));
						elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExtraElement[i]));
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");

					}

				}
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Data_type1 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				Data_type1 object=new Data_type1();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"data_type1".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Data_type1) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list1=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement()){

						// Process the array and step past its final element's
						// end.

						boolean loopDone1=false;

						while(!loopDone1){
							event=reader.getEventType();
							if(javax.xml.stream.XMLStreamConstants.START_ELEMENT == event){

								// We need to wrap the reader so that it
								// produces a fake START_DOCUEMENT event
								org.apache.axis2.databinding.utils.NamedStaxOMBuilder builder1=new org.apache.axis2.databinding.utils.NamedStaxOMBuilder(new org.apache.axis2.util.StreamWrapper(reader),reader.getName());

								list1.add(builder1.getOMElement());
								reader.next();
								if(reader.isEndElement()){
									// we have two countinuos end elements
									loopDone1=true;
								}

							}
							else if(javax.xml.stream.XMLStreamConstants.END_ELEMENT == event){
								loopDone1=true;
							}
							else{
								reader.next();
							}

						}

						object.setExtraElement((org.apache.axiom.om.OMElement[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.apache.axiom.om.OMElement.class,list1));

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Task implements org.apache.axis2.databinding.ADBBean{
		/*
		 * This type was generated from the piece of schema that had name = task
		 * Namespace URI =
		 * http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/
		 * Namespace Prefix = ns1
		 */

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Metadata
		 */

		protected TaskMetadata localMetadata;

		/**
		 * Auto generated getter method
		 * 
		 * @return TaskMetadata
		 */
		public TaskMetadata getMetadata(){
			return localMetadata;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Metadata
		 */
		public void setMetadata(TaskMetadata param){

			this.localMetadata=param;

		}

		/**
		 * field for Input
		 */

		protected Input_type1 localInput;

		/**
		 * Auto generated getter method
		 * 
		 * @return Input_type1
		 */
		public Input_type1 getInput(){
			return localInput;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Input
		 */
		public void setInput(Input_type1 param){

			this.localInput=param;

		}

		/**
		 * field for Output
		 */

		protected Output_type0 localOutput;

		/**
		 * Auto generated getter method
		 * 
		 * @return Output_type0
		 */
		public Output_type0 getOutput(){
			return localOutput;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Output
		 */
		public void setOutput(Output_type0 param){

			this.localOutput=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					Task.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":task",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","task",xmlWriter);
				}

			}

			if(localMetadata == null){
				throw new org.apache.axis2.databinding.ADBException("metadata cannot be null!!");
			}
			localMetadata.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","metadata"),factory,xmlWriter);

			if(localInput == null){
				throw new org.apache.axis2.databinding.ADBException("input cannot be null!!");
			}
			localInput.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","input"),factory,xmlWriter);

			if(localOutput == null){
				throw new org.apache.axis2.databinding.ADBException("output cannot be null!!");
			}
			localOutput.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","output"),factory,xmlWriter);

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","metadata"));

			if(localMetadata == null){
				throw new org.apache.axis2.databinding.ADBException("metadata cannot be null!!");
			}
			elementList.add(localMetadata);

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","input"));

			if(localInput == null){
				throw new org.apache.axis2.databinding.ADBException("input cannot be null!!");
			}
			elementList.add(localInput);

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","output"));

			if(localOutput == null){
				throw new org.apache.axis2.databinding.ADBException("output cannot be null!!");
			}
			elementList.add(localOutput);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Task parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				Task object=new Task();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"task".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Task) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","metadata").equals(reader.getName())){

						object.setMetadata(TaskMetadata.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","input").equals(reader.getName())){

						object.setInput(Input_type1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","output").equals(reader.getName())){

						object.setOutput(Output_type0.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						//throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ExtensionMapper{

		public static java.lang.Object getTypeObject(java.lang.String namespaceURI,java.lang.String typeName,javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{

			if("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/".equals(namespaceURI) && "attachments_type0".equals(typeName)){

				return Attachments_type0.Factory.parse(reader);

			}

			if("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/".equals(namespaceURI) && "task".equals(typeName)){

				return Task.Factory.parse(reader);

			}

			if("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/".equals(namespaceURI) && "attachmentMetadata".equals(typeName)){

				return AttachmentMetadata.Factory.parse(reader);

			}

			if("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/".equals(namespaceURI) && "data_type0".equals(typeName)){

				return Data_type0.Factory.parse(reader);

			}

			if("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/".equals(namespaceURI) && "data_type1".equals(typeName)){

				return Data_type1.Factory.parse(reader);

			}

			if("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/".equals(namespaceURI) && "output_type0".equals(typeName)){

				return Output_type0.Factory.parse(reader);

			}

			if("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/".equals(namespaceURI) && "accessControlType".equals(typeName)){

				return AccessControlType.Factory.parse(reader);

			}

			if("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/".equals(namespaceURI) && "input_type0".equals(typeName)){

				return Input_type0.Factory.parse(reader);

			}

			if("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/".equals(namespaceURI) && "input_type1".equals(typeName)){

				return Input_type1.Factory.parse(reader);

			}

			if("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/".equals(namespaceURI) && "taskMetadata".equals(typeName)){

				return TaskMetadata.Factory.parse(reader);

			}

			if("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/".equals(namespaceURI) && "attachment".equals(typeName)){

				return Attachment.Factory.parse(reader);

			}

			throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
		}

	}

	public static class GetTaskListRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getTaskListRequest","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}
		
		public GetTaskListRequest(){}

		public GetTaskListRequest(String localParticipantToken){
			super();
			this.localParticipantToken=localParticipantToken;
		}

		/**
		 * field for ParticipantToken
		 */

		protected java.lang.String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(java.lang.String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					GetTaskListRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":getTaskListRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","getTaskListRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GetTaskListRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetTaskListRequest object=new GetTaskListRequest();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"getTaskListRequest".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetTaskListRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Output_type0 implements org.apache.axis2.databinding.ADBBean{
		/*
		 * This type was generated from the piece of schema that had name =
		 * output_type0 Namespace URI =
		 * http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/
		 * Namespace Prefix = ns1
		 */

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for ExtraElement This was an Array!
		 */

		protected org.apache.axiom.om.OMElement[] localExtraElement;

		/**
		 * Auto generated getter method
		 * 
		 * @return org.apache.axiom.om.OMElement[]
		 */
		public org.apache.axiom.om.OMElement[] getExtraElement(){
			return localExtraElement;
		}

		/**
		 * validate the array for ExtraElement
		 */
		protected void validateExtraElement(org.apache.axiom.om.OMElement[] param){

			if((param != null) && (param.length < 1)){
				throw new java.lang.RuntimeException();
			}

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ExtraElement
		 */
		public void setExtraElement(org.apache.axiom.om.OMElement[] param){

			validateExtraElement(param);

			this.localExtraElement=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            org.apache.axiom.om.OMElement
		 */
		public void addExtraElement(org.apache.axiom.om.OMElement param){
			if(localExtraElement == null){
				localExtraElement=new org.apache.axiom.om.OMElement[]{};
			}

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraElement);
			list.add(param);
			this.localExtraElement=(org.apache.axiom.om.OMElement[]) list.toArray(new org.apache.axiom.om.OMElement[list.size()]);

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					Output_type0.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":output_type0",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","output_type0",xmlWriter);
				}

			}

			if(localExtraElement != null){
				for(int i=0;i < localExtraElement.length;i++){
					if(localExtraElement[i] != null){
						localExtraElement[i].serialize(xmlWriter);
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");

					}
				}
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
			}

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localExtraElement != null){
				for(int i=0;i < localExtraElement.length;i++){
					if(localExtraElement[i] != null){
						elementList.add(new javax.xml.namespace.QName("","extraElement"));
						elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExtraElement[i]));
					}
					else{

						throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");

					}

				}
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("extraElement cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Output_type0 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				Output_type0 object=new Output_type0();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"output_type0".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Output_type0) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list1=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement()){

						// Process the array and step past its final element's
						// end.

						boolean loopDone1=false;

						while(!loopDone1){
							event=reader.getEventType();
							if(javax.xml.stream.XMLStreamConstants.START_ELEMENT == event){

								// We need to wrap the reader so that it
								// produces a fake START_DOCUEMENT event
								org.apache.axis2.databinding.utils.NamedStaxOMBuilder builder1=new org.apache.axis2.databinding.utils.NamedStaxOMBuilder(new org.apache.axis2.util.StreamWrapper(reader),reader.getName());

								list1.add(builder1.getOMElement());
								reader.next();
								if(reader.isEndElement()){
									// we have two countinuos end elements
									loopDone1=true;
								}

							}
							else if(javax.xml.stream.XMLStreamConstants.END_ELEMENT == event){
								loopDone1=true;
							}
							else{
								reader.next();
							}

						}

						object.setExtraElement((org.apache.axiom.om.OMElement[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.apache.axiom.om.OMElement.class,list1));

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class UnavailableAttachmentFault implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","unavailableAttachmentFault","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Reason
		 */

		protected java.lang.String localReason;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getReason(){
			return localReason;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Reason
		 */
		public void setReason(java.lang.String param){

			this.localReason=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					UnavailableAttachmentFault.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":unavailableAttachmentFault",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","unavailableAttachmentFault",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"reason",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"reason");
				}

			}
			else{
				xmlWriter.writeStartElement("reason");
			}

			if(localReason == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("reason cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localReason);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reason"));

			if(localReason != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReason));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("reason cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static UnavailableAttachmentFault parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				UnavailableAttachmentFault object=new UnavailableAttachmentFault();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"unavailableAttachmentFault".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (UnavailableAttachmentFault) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reason").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setReason(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetPipaRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getPipaRequest","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Pipaurl
		 */

		protected java.lang.String localPipaurl;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPipaurl(){
			return localPipaurl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pipaurl
		 */
		public void setPipaurl(java.lang.String param){

			this.localPipaurl=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected java.lang.String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(java.lang.String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					GetPipaRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":getPipaRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","getPipaRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"pipaurl",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"pipaurl");
				}

			}
			else{
				xmlWriter.writeStartElement("pipaurl");
			}

			if(localPipaurl == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("pipaurl cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localPipaurl);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","pipaurl"));

			if(localPipaurl != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPipaurl));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("pipaurl cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GetPipaRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				GetPipaRequest object=new GetPipaRequest();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"getPipaRequest".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetPipaRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","pipaurl").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setPipaurl(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InvalidParticipantTokenFault implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidParticipantTokenFault","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Reason
		 */

		protected java.lang.String localReason;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getReason(){
			return localReason;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Reason
		 */
		public void setReason(java.lang.String param){

			this.localReason=param;

		}

		/**
		 * field for InvalidToken
		 */

		protected java.lang.String localInvalidToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getInvalidToken(){
			return localInvalidToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InvalidToken
		 */
		public void setInvalidToken(java.lang.String param){

			this.localInvalidToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					InvalidParticipantTokenFault.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":invalidParticipantTokenFault",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","invalidParticipantTokenFault",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"reason",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"reason");
				}

			}
			else{
				xmlWriter.writeStartElement("reason");
			}

			if(localReason == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("reason cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localReason);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"invalidToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"invalidToken");
				}

			}
			else{
				xmlWriter.writeStartElement("invalidToken");
			}

			if(localInvalidToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("invalidToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localInvalidToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reason"));

			if(localReason != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReason));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("reason cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidToken"));

			if(localInvalidToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInvalidToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("invalidToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InvalidParticipantTokenFault parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				InvalidParticipantTokenFault object=new InvalidParticipantTokenFault();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"invalidParticipantTokenFault".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (InvalidParticipantTokenFault) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reason").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setReason(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidToken").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setInvalidToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InitRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","initRequest","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId
		 */

		protected java.lang.String localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTaskId(){
			return localTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(java.lang.String param){

			this.localTaskId=param;

		}

		/**
		 * field for Input
		 */

		protected Input_type0 localInput;

		/**
		 * Auto generated getter method
		 * 
		 * @return Input_type0
		 */
		public Input_type0 getInput(){
			return localInput;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Input
		 */
		public void setInput(Input_type0 param){

			this.localInput=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected java.lang.String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(java.lang.String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					InitRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":initRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","initRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskId",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskId");
				}

			}
			else{
				xmlWriter.writeStartElement("taskId");
			}

			if(localTaskId == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskId);

			}

			xmlWriter.writeEndElement();

			if(localInput == null){
				throw new org.apache.axis2.databinding.ADBException("input cannot be null!!");
			}
			localInput.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","input"),factory,xmlWriter);

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));

			if(localTaskId != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","input"));

			if(localInput == null){
				throw new org.apache.axis2.databinding.ADBException("input cannot be null!!");
			}
			elementList.add(localInput);

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InitRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				InitRequest object=new InitRequest();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"initRequest".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (InitRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","input").equals(reader.getName())){

						object.setInput(Input_type0.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AccessControlType implements org.apache.axis2.databinding.ADBBean{
		/*
		 * This type was generated from the piece of schema that had name =
		 * accessControlType Namespace URI =
		 * http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/
		 * Namespace Prefix = ns1
		 */

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for User This was an Array!
		 */

		protected java.lang.String[] localUser;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localUserTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getUser(){
			return localUser;
		}

		/**
		 * validate the array for User
		 */
		protected void validateUser(java.lang.String[] param){

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            User
		 */
		public void setUser(java.lang.String[] param){

			validateUser(param);

			if(param != null){
				// update the setting tracker
				localUserTracker=true;
			}
			else{
				localUserTracker=false;

			}

			this.localUser=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addUser(java.lang.String param){
			if(localUser == null){
				localUser=new java.lang.String[]{};
			}

			// update the setting tracker
			localUserTracker=true;

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localUser);
			list.add(param);
			this.localUser=(java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 * field for Role This was an Array!
		 */

		protected java.lang.String[] localRole;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRoleTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getRole(){
			return localRole;
		}

		/**
		 * validate the array for Role
		 */
		protected void validateRole(java.lang.String[] param){

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Role
		 */
		public void setRole(java.lang.String[] param){

			validateRole(param);

			if(param != null){
				// update the setting tracker
				localRoleTracker=true;
			}
			else{
				localRoleTracker=false;

			}

			this.localRole=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addRole(java.lang.String param){
			if(localRole == null){
				localRole=new java.lang.String[]{};
			}

			// update the setting tracker
			localRoleTracker=true;

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localRole);
			list.add(param);
			this.localRole=(java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 * field for Authorized
		 */

		protected java.lang.String localAuthorized;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAuthorizedTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAuthorized(){
			return localAuthorized;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Authorized
		 */
		public void setAuthorized(java.lang.String param){

			if(param != null){
				// update the setting tracker
				localAuthorizedTracker=true;
			}
			else{
				localAuthorizedTracker=false;

			}

			this.localAuthorized=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					AccessControlType.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":accessControlType",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","accessControlType",xmlWriter);
				}

			}
			if(localUserTracker){
				if(localUser != null){
					namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
					boolean emptyNamespace=namespace == null || namespace.length() == 0;
					prefix=emptyNamespace ? null : xmlWriter.getPrefix(namespace);
					for(int i=0;i < localUser.length;i++){

						if(localUser[i] != null){

							if(!emptyNamespace){
								if(prefix == null){
									java.lang.String prefix2=generatePrefix(namespace);

									xmlWriter.writeStartElement(prefix2,"user",namespace);
									xmlWriter.writeNamespace(prefix2,namespace);
									xmlWriter.setPrefix(prefix2,namespace);

								}
								else{
									xmlWriter.writeStartElement(namespace,"user");
								}

							}
							else{
								xmlWriter.writeStartElement("user");
							}

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUser[i]));

							xmlWriter.writeEndElement();

						}
						else{

							// we have to do nothing since minOccurs is zero

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("user cannot be null!!");

				}

			}
			if(localRoleTracker){
				if(localRole != null){
					namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
					boolean emptyNamespace=namespace == null || namespace.length() == 0;
					prefix=emptyNamespace ? null : xmlWriter.getPrefix(namespace);
					for(int i=0;i < localRole.length;i++){

						if(localRole[i] != null){

							if(!emptyNamespace){
								if(prefix == null){
									java.lang.String prefix2=generatePrefix(namespace);

									xmlWriter.writeStartElement(prefix2,"role",namespace);
									xmlWriter.writeNamespace(prefix2,namespace);
									xmlWriter.setPrefix(prefix2,namespace);

								}
								else{
									xmlWriter.writeStartElement(namespace,"role");
								}

							}
							else{
								xmlWriter.writeStartElement("role");
							}

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRole[i]));

							xmlWriter.writeEndElement();

						}
						else{

							// we have to do nothing since minOccurs is zero

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("role cannot be null!!");

				}

			}
			if(localAuthorizedTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"authorized",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"authorized");
					}

				}
				else{
					xmlWriter.writeStartElement("authorized");
				}

				if(localAuthorized == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("authorized cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(localAuthorized);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localUserTracker){
				if(localUser != null){
					for(int i=0;i < localUser.length;i++){

						if(localUser[i] != null){
							elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","user"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUser[i]));
						}
						else{

							// have to do nothing

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("user cannot be null!!");

				}

			}
			if(localRoleTracker){
				if(localRole != null){
					for(int i=0;i < localRole.length;i++){

						if(localRole[i] != null){
							elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","role"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRole[i]));
						}
						else{

							// have to do nothing

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("role cannot be null!!");

				}

			}
			if(localAuthorizedTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","authorized"));

				if(localAuthorized != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthorized));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("authorized cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AccessControlType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
				AccessControlType object=new AccessControlType();

				int event;
				java.lang.String nillableValue=null;
				java.lang.String prefix="";
				java.lang.String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							java.lang.String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"accessControlType".equals(type)){
								// find namespace for the prefix
								java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AccessControlType) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list1=new java.util.ArrayList();

					java.util.ArrayList list2=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","user").equals(reader.getName())){

						// Process the array and step past its final element's
						// end.
						list1.add(reader.getElementText());

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1=false;
						while(!loopDone1){
							// Ensure we are at the EndElement
							while(!reader.isEndElement()){
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","user").equals(reader.getName())){
									list1.add(reader.getElementText());

								}
								else{
									loopDone1=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setUser((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","role").equals(reader.getName())){

						// Process the array and step past its final element's
						// end.
						list2.add(reader.getElementText());

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone2=false;
						while(!loopDone2){
							// Ensure we are at the EndElement
							while(!reader.isEndElement()){
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone2=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","role").equals(reader.getName())){
									list2.add(reader.getElementText());

								}
								else{
									loopDone2=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setRole((java.lang.String[]) list2.toArray(new java.lang.String[list2.size()]));

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","authorized").equals(reader.getName())){

						java.lang.String content=reader.getElementText();

						object.setAuthorized(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetTaskListResponse implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getTaskListResponse","ns1");

		private static java.lang.String generatePrefix(java.lang.String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Task This was an Array!
		 */

		protected TaskMetadata[] localTask;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTaskTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return TaskMetadata[]
		 */
		public TaskMetadata[] getTask(){
			return localTask;
		}

		/**
		 * validate the array for Task
		 */
		protected void validateTask(TaskMetadata[] param){

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Task
		 */
		public void setTask(TaskMetadata[] param){

			validateTask(param);

			if(param != null){
				// update the setting tracker
				localTaskTracker=true;
			}
			else{
				localTaskTracker=false;

			}

			this.localTask=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            TaskMetadata
		 */
		public void addTask(TaskMetadata param){
			if(localTask == null){
				localTask=new TaskMetadata[]{};
			}

			// update the setting tracker
			localTaskTracker=true;

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localTask);
			list.add(param);
			this.localTask=(TaskMetadata[]) list.toArray(new TaskMetadata[list.size()]);

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					GetTaskListResponse.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			java.lang.String prefix=null;
			java.lang.String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				java.lang.String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				java.lang.String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":getTaskListResponse",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","getTaskListResponse",xmlWriter);
				}

			}
			if(localTaskTracker){
				if(localTask != null){
					for(int i=0;i < localTask.length;i++){
						if(localTask[i] != null){
							localTask[i].serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"),factory,xmlWriter);
						}
						else{

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			java.lang.String attributeNamespace=qname.getNamespaceURI();
			java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			java.lang.String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			java.lang.String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite=new java.lang.StringBuffer();
				java.lang.String namespaceURI=null;
				java.lang.String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException{
			java.lang.String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localTaskTracker){
				if(localTask != null){
					for(int i=0;i < localTask.length;i++){

						if(localTask[i] != null){
							elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"));
							elementList.add(localTask[i]);
						}
						else{

							// nothing to do

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GetTaskListResponse parse(XMLStreamReader reader) throws java.lang.Exception{
				GetTaskListResponse object=new GetTaskListResponse();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"getTaskListResponse".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetTaskListResponse) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list1=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					QName nombre=new QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task");
					QName rNombre=reader.getName();
					if(reader.isStartElement() && nombre.equals(rNombre)){

						// Process the array and step past its final element's
						// end.
						list1.add(TaskMetadata.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1=false;
						while(!loopDone1){
							// We should be at the end element, but make sure
							while(!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task").equals(reader.getName())){
									list1.add(TaskMetadata.Factory.parse(reader));

								}
								else{
									loopDone1=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setTask((TaskMetadata[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(TaskMetadata.class,list1));

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetTaskResponse implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getTaskResponse","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Task
		 */

		protected Task localTask;

		/**
		 * Auto generated getter method
		 * 
		 * @return Task
		 */
		public Task getTask(){
			return localTask;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Task
		 */
		public void setTask(Task param){

			this.localTask=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					GetTaskResponse.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":getTaskResponse",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","getTaskResponse",xmlWriter);
				}

			}

			if(localTask == null){
				throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");
			}
			localTask.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"),factory,xmlWriter);

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"));

			if(localTask == null){
				throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");
			}
			elementList.add(localTask);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GetTaskResponse parse(XMLStreamReader reader) throws java.lang.Exception{
				GetTaskResponse object=new GetTaskResponse();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"getTaskResponse".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetTaskResponse) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task").equals(reader.getName())){

						object.setTask(Task.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetAttachmentsRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getAttachmentsRequest","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId
		 */

		protected String localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getTaskId(){
			return localTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(String param){

			this.localTaskId=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					GetAttachmentsRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":getAttachmentsRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","getAttachmentsRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskId",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskId");
				}

			}
			else{
				xmlWriter.writeStartElement("taskId");
			}

			if(localTaskId == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskId);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));

			if(localTaskId != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GetAttachmentsRequest parse(XMLStreamReader reader) throws java.lang.Exception{
				GetAttachmentsRequest object=new GetAttachmentsRequest();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"getAttachmentsRequest".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetAttachmentsRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InvalidInputMessageFault implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","invalidInputMessageFault","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Reason
		 */

		protected String localReason;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getReason(){
			return localReason;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Reason
		 */
		public void setReason(String param){

			this.localReason=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					InvalidInputMessageFault.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":invalidInputMessageFault",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","invalidInputMessageFault",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"reason",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"reason");
				}

			}
			else{
				xmlWriter.writeStartElement("reason");
			}

			if(localReason == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("reason cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localReason);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reason"));

			if(localReason != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReason));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("reason cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InvalidInputMessageFault parse(XMLStreamReader reader) throws java.lang.Exception{
				InvalidInputMessageFault object=new InvalidInputMessageFault();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"invalidInputMessageFault".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (InvalidInputMessageFault) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reason").equals(reader.getName())){

						String content=reader.getElementText();

						object.setReason(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ReassignRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","reassignRequest","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId
		 */

		protected String localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getTaskId(){
			return localTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(String param){

			this.localTaskId=param;

		}

		/**
		 * field for UserOwner This was an Array!
		 */

		protected String[] localUserOwner;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localUserOwnerTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String[]
		 */
		public String[] getUserOwner(){
			return localUserOwner;
		}

		/**
		 * validate the array for UserOwner
		 */
		protected void validateUserOwner(String[] param){

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UserOwner
		 */
		public void setUserOwner(String[] param){

			validateUserOwner(param);

			if(param != null){
				// update the setting tracker
				localUserOwnerTracker=true;
			}
			else{
				localUserOwnerTracker=false;

			}

			this.localUserOwner=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            String
		 */
		public void addUserOwner(String param){
			if(localUserOwner == null){
				localUserOwner=new String[]{};
			}

			// update the setting tracker
			localUserOwnerTracker=true;

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localUserOwner);
			list.add(param);
			this.localUserOwner=(String[]) list.toArray(new String[list.size()]);

		}

		/**
		 * field for RoleOwner This was an Array!
		 */

		protected String[] localRoleOwner;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRoleOwnerTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String[]
		 */
		public String[] getRoleOwner(){
			return localRoleOwner;
		}

		/**
		 * validate the array for RoleOwner
		 */
		protected void validateRoleOwner(String[] param){

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RoleOwner
		 */
		public void setRoleOwner(String[] param){

			validateRoleOwner(param);

			if(param != null){
				// update the setting tracker
				localRoleOwnerTracker=true;
			}
			else{
				localRoleOwnerTracker=false;

			}

			this.localRoleOwner=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            String
		 */
		public void addRoleOwner(String param){
			if(localRoleOwner == null){
				localRoleOwner=new String[]{};
			}

			// update the setting tracker
			localRoleOwnerTracker=true;

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localRoleOwner);
			list.add(param);
			this.localRoleOwner=(String[]) list.toArray(new String[list.size()]);

		}

		/**
		 * field for TaskState
		 */

		protected String localTaskState;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getTaskState(){
			return localTaskState;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskState
		 */
		public void setTaskState(String param){

			this.localTaskState=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					ReassignRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":reassignRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","reassignRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskId",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskId");
				}

			}
			else{
				xmlWriter.writeStartElement("taskId");
			}

			if(localTaskId == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskId);

			}

			xmlWriter.writeEndElement();
			if(localUserOwnerTracker){
				if(localUserOwner != null){
					namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
					boolean emptyNamespace=namespace == null || namespace.length() == 0;
					prefix=emptyNamespace ? null : xmlWriter.getPrefix(namespace);
					for(int i=0;i < localUserOwner.length;i++){

						if(localUserOwner[i] != null){

							if(!emptyNamespace){
								if(prefix == null){
									String prefix2=generatePrefix(namespace);

									xmlWriter.writeStartElement(prefix2,"userOwner",namespace);
									xmlWriter.writeNamespace(prefix2,namespace);
									xmlWriter.setPrefix(prefix2,namespace);

								}
								else{
									xmlWriter.writeStartElement(namespace,"userOwner");
								}

							}
							else{
								xmlWriter.writeStartElement("userOwner");
							}

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserOwner[i]));

							xmlWriter.writeEndElement();

						}
						else{

							// we have to do nothing since minOccurs is zero

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("userOwner cannot be null!!");

				}

			}
			if(localRoleOwnerTracker){
				if(localRoleOwner != null){
					namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
					boolean emptyNamespace=namespace == null || namespace.length() == 0;
					prefix=emptyNamespace ? null : xmlWriter.getPrefix(namespace);
					for(int i=0;i < localRoleOwner.length;i++){

						if(localRoleOwner[i] != null){

							if(!emptyNamespace){
								if(prefix == null){
									String prefix2=generatePrefix(namespace);

									xmlWriter.writeStartElement(prefix2,"roleOwner",namespace);
									xmlWriter.writeNamespace(prefix2,namespace);
									xmlWriter.setPrefix(prefix2,namespace);

								}
								else{
									xmlWriter.writeStartElement(namespace,"roleOwner");
								}

							}
							else{
								xmlWriter.writeStartElement("roleOwner");
							}

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoleOwner[i]));

							xmlWriter.writeEndElement();

						}
						else{

							// we have to do nothing since minOccurs is zero

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("roleOwner cannot be null!!");

				}

			}
			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskState",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskState");
				}

			}
			else{
				xmlWriter.writeStartElement("taskState");
			}

			if(localTaskState == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskState cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskState);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));

			if(localTaskId != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");
			}
			if(localUserOwnerTracker){
				if(localUserOwner != null){
					for(int i=0;i < localUserOwner.length;i++){

						if(localUserOwner[i] != null){
							elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","userOwner"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserOwner[i]));
						}
						else{

							// have to do nothing

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("userOwner cannot be null!!");

				}

			}
			if(localRoleOwnerTracker){
				if(localRoleOwner != null){
					for(int i=0;i < localRoleOwner.length;i++){

						if(localRoleOwner[i] != null){
							elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","roleOwner"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoleOwner[i]));
						}
						else{

							// have to do nothing

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("roleOwner cannot be null!!");

				}

			}
			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskState"));

			if(localTaskState != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskState));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskState cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ReassignRequest parse(XMLStreamReader reader) throws java.lang.Exception{
				ReassignRequest object=new ReassignRequest();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"reassignRequest".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ReassignRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list2=new java.util.ArrayList();

					java.util.ArrayList list3=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","userOwner").equals(reader.getName())){

						// Process the array and step past its final element's
						// end.
						list2.add(reader.getElementText());

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone2=false;
						while(!loopDone2){
							// Ensure we are at the EndElement
							while(!reader.isEndElement()){
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone2=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","userOwner").equals(reader.getName())){
									list2.add(reader.getElementText());

								}
								else{
									loopDone2=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setUserOwner((String[]) list2.toArray(new String[list2.size()]));

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","roleOwner").equals(reader.getName())){

						// Process the array and step past its final element's
						// end.
						list3.add(reader.getElementText());

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone3=false;
						while(!loopDone3){
							// Ensure we are at the EndElement
							while(!reader.isEndElement()){
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone3=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","roleOwner").equals(reader.getName())){
									list3.add(reader.getElementText());

								}
								else{
									loopDone3=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setRoleOwner((String[]) list3.toArray(new String[list3.size()]));

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskState").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTaskState(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Attachment implements org.apache.axis2.databinding.ADBBean{
		/*
		 * This type was generated from the piece of schema that had name =
		 * attachment Namespace URI =
		 * http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/
		 * Namespace Prefix = ns1
		 */

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for AttachmentMetadata
		 */

		protected AttachmentMetadata localAttachmentMetadata;

		/**
		 * Auto generated getter method
		 * 
		 * @return AttachmentMetadata
		 */
		public AttachmentMetadata getAttachmentMetadata(){
			return localAttachmentMetadata;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AttachmentMetadata
		 */
		public void setAttachmentMetadata(AttachmentMetadata param){

			this.localAttachmentMetadata=param;

		}

		/**
		 * field for PayloadUrl
		 */

		protected String localPayloadUrl;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getPayloadUrl(){
			return localPayloadUrl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PayloadUrl
		 */
		public void setPayloadUrl(String param){

			this.localPayloadUrl=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					Attachment.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":attachment",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","attachment",xmlWriter);
				}

			}

			if(localAttachmentMetadata == null){
				throw new org.apache.axis2.databinding.ADBException("attachmentMetadata cannot be null!!");
			}
			localAttachmentMetadata.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachmentMetadata"),factory,xmlWriter);

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"payloadUrl",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"payloadUrl");
				}

			}
			else{
				xmlWriter.writeStartElement("payloadUrl");
			}

			if(localPayloadUrl == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("payloadUrl cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localPayloadUrl);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachmentMetadata"));

			if(localAttachmentMetadata == null){
				throw new org.apache.axis2.databinding.ADBException("attachmentMetadata cannot be null!!");
			}
			elementList.add(localAttachmentMetadata);

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","payloadUrl"));

			if(localPayloadUrl != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPayloadUrl));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("payloadUrl cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Attachment parse(XMLStreamReader reader) throws java.lang.Exception{
				Attachment object=new Attachment();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"attachment".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Attachment) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachmentMetadata").equals(reader.getName())){

						object.setAttachmentMetadata(AttachmentMetadata.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","payloadUrl").equals(reader.getName())){

						String content=reader.getElementText();

						object.setPayloadUrl(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DeleteAllRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","deleteAllRequest","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskType
		 */

		protected String localTaskType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTaskTypeTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getTaskType(){
			return localTaskType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskType
		 */
		public void setTaskType(String param){

			if(param != null){
				// update the setting tracker
				localTaskTypeTracker=true;
			}
			else{
				localTaskTypeTracker=false;

			}

			this.localTaskType=param;

		}

		/**
		 * field for SubQuery
		 */

		protected String localSubQuery;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSubQueryTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getSubQuery(){
			return localSubQuery;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SubQuery
		 */
		public void setSubQuery(String param){

			if(param != null){
				// update the setting tracker
				localSubQueryTracker=true;
			}
			else{
				localSubQueryTracker=false;

			}

			this.localSubQuery=param;

		}

		/**
		 * field for FakeDelete
		 */

		protected boolean localFakeDelete;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getFakeDelete(){
			return localFakeDelete;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FakeDelete
		 */
		public void setFakeDelete(boolean param){

			this.localFakeDelete=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					DeleteAllRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":deleteAllRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","deleteAllRequest",xmlWriter);
				}

			}
			if(localTaskTypeTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"taskType",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"taskType");
					}

				}
				else{
					xmlWriter.writeStartElement("taskType");
				}

				if(localTaskType == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("taskType cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(localTaskType);

				}

				xmlWriter.writeEndElement();
			}
			if(localSubQueryTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"subQuery",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"subQuery");
					}

				}
				else{
					xmlWriter.writeStartElement("subQuery");
				}

				if(localSubQuery == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("subQuery cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(localSubQuery);

				}

				xmlWriter.writeEndElement();
			}
			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"fakeDelete",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"fakeDelete");
				}

			}
			else{
				xmlWriter.writeStartElement("fakeDelete");
			}

			if(false){

				throw new org.apache.axis2.databinding.ADBException("fakeDelete cannot be null!!");

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFakeDelete));
			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localTaskTypeTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskType"));

				if(localTaskType != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskType));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("taskType cannot be null!!");
				}
			}
			if(localSubQueryTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","subQuery"));

				if(localSubQuery != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubQuery));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("subQuery cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","fakeDelete"));

			elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFakeDelete));

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static DeleteAllRequest parse(XMLStreamReader reader) throws java.lang.Exception{
				DeleteAllRequest object=new DeleteAllRequest();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"deleteAllRequest".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DeleteAllRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskType").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTaskType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","subQuery").equals(reader.getName())){

						String content=reader.getElementText();

						object.setSubQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","fakeDelete").equals(reader.getName())){

						String content=reader.getElementText();

						object.setFakeDelete(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class OkResponse implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","okResponse","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					OkResponse.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":okResponse",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","okResponse",xmlWriter);
				}

			}

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static OkResponse parse(XMLStreamReader reader) throws java.lang.Exception{
				OkResponse object=new OkResponse();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"okResponse".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (OkResponse) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					/*if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());*/

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetAvailableTasksRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getAvailableTasksRequest","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for ParticipantToken
		 */

		protected String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(String param){

			this.localParticipantToken=param;

		}

		/**
		 * field for TaskType
		 */

		protected String localTaskType;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getTaskType(){
			return localTaskType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskType
		 */
		public void setTaskType(String param){

			this.localTaskType=param;

		}

		/**
		 * field for SubQuery
		 */

		protected String localSubQuery;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getSubQuery(){
			return localSubQuery;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SubQuery
		 */
		public void setSubQuery(String param){

			this.localSubQuery=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					GetAvailableTasksRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":getAvailableTasksRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","getAvailableTasksRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskType",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskType");
				}

			}
			else{
				xmlWriter.writeStartElement("taskType");
			}

			if(localTaskType == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskType cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskType);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"subQuery",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"subQuery");
				}

			}
			else{
				xmlWriter.writeStartElement("subQuery");
			}

			if(localSubQuery == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("subQuery cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localSubQuery);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskType"));

			if(localTaskType != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskType));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskType cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","subQuery"));

			if(localSubQuery != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubQuery));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("subQuery cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GetAvailableTasksRequest parse(XMLStreamReader reader) throws java.lang.Exception{
				GetAvailableTasksRequest object=new GetAvailableTasksRequest();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"getAvailableTasksRequest".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetAvailableTasksRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskType").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTaskType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","subQuery").equals(reader.getName())){

						String content=reader.getElementText();

						object.setSubQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Attachments_type0 implements org.apache.axis2.databinding.ADBBean{
		/*
		 * This type was generated from the piece of schema that had name =
		 * attachments_type0 Namespace URI =
		 * http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/
		 * Namespace Prefix = ns1
		 */

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Attachment This was an Array!
		 */

		protected Attachment[] localAttachment;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAttachmentTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return Attachment[]
		 */
		public Attachment[] getAttachment(){
			return localAttachment;
		}

		/**
		 * validate the array for Attachment
		 */
		protected void validateAttachment(Attachment[] param){

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Attachment
		 */
		public void setAttachment(Attachment[] param){

			validateAttachment(param);

			if(param != null){
				// update the setting tracker
				localAttachmentTracker=true;
			}
			else{
				localAttachmentTracker=false;

			}

			this.localAttachment=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Attachment
		 */
		public void addAttachment(Attachment param){
			if(localAttachment == null){
				localAttachment=new Attachment[]{};
			}

			// update the setting tracker
			localAttachmentTracker=true;

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localAttachment);
			list.add(param);
			this.localAttachment=(Attachment[]) list.toArray(new Attachment[list.size()]);

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					Attachments_type0.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":attachments_type0",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","attachments_type0",xmlWriter);
				}

			}
			if(localAttachmentTracker){
				if(localAttachment != null){
					for(int i=0;i < localAttachment.length;i++){
						if(localAttachment[i] != null){
							localAttachment[i].serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachment"),factory,xmlWriter);
						}
						else{

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("attachment cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			if(localAttachmentTracker){
				if(localAttachment != null){
					for(int i=0;i < localAttachment.length;i++){

						if(localAttachment[i] != null){
							elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachment"));
							elementList.add(localAttachment[i]);
						}
						else{

							// nothing to do

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("attachment cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Attachments_type0 parse(XMLStreamReader reader) throws java.lang.Exception{
				Attachments_type0 object=new Attachments_type0();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"attachments_type0".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Attachments_type0) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list1=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachment").equals(reader.getName())){

						// Process the array and step past its final element's
						// end.
						list1.add(Attachment.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1=false;
						while(!loopDone1){
							// We should be at the end element, but make sure
							while(!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachment").equals(reader.getName())){
									list1.add(Attachment.Factory.parse(reader));

								}
								else{
									loopDone1=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setAttachment((Attachment[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(Attachment.class,list1));

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TaskMetadata implements org.apache.axis2.databinding.ADBBean{
		/*
		 * This type was generated from the piece of schema that had name =
		 * taskMetadata Namespace URI =
		 * http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/
		 * Namespace Prefix = ns1
		 */

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId
		 */

		protected String localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getTaskId(){
			return localTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(String param){

			this.localTaskId=param;

		}

		/**
		 * field for TaskState
		 */

		protected org.apache.axis2.databinding.types.Token localTaskState;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTaskStateTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return org.apache.axis2.databinding.types.Token
		 */
		public org.apache.axis2.databinding.types.Token getTaskState(){
			return localTaskState;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskState
		 */
		public void setTaskState(org.apache.axis2.databinding.types.Token param){

			if(param != null){
				// update the setting tracker
				localTaskStateTracker=true;
			}
			else{
				localTaskStateTracker=false;

			}

			this.localTaskState=param;

		}

		/**
		 * field for TaskType
		 */

		protected org.apache.axis2.databinding.types.Token localTaskType;

		/**
		 * Auto generated getter method
		 * 
		 * @return org.apache.axis2.databinding.types.Token
		 */
		public org.apache.axis2.databinding.types.Token getTaskType(){
			return localTaskType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskType
		 */
		public void setTaskType(org.apache.axis2.databinding.types.Token param){

			this.localTaskType=param;

		}

		/**
		 * field for Description
		 */

		protected String localDescription;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDescriptionTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getDescription(){
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(String param){

			if(param != null){
				// update the setting tracker
				localDescriptionTracker=true;
			}
			else{
				localDescriptionTracker=false;

			}

			this.localDescription=param;

		}

		/**
		 * field for ProcessId
		 */

		protected String localProcessId;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localProcessIdTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getProcessId(){
			return localProcessId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ProcessId
		 */
		public void setProcessId(String param){

			if(param != null){
				// update the setting tracker
				localProcessIdTracker=true;
			}
			else{
				localProcessIdTracker=false;

			}

			this.localProcessId=param;

		}

		/**
		 * field for CreationDate
		 */

		protected java.util.Calendar localCreationDate;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCreationDateTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Calendar
		 */
		public java.util.Calendar getCreationDate(){
			return localCreationDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CreationDate
		 */
		public void setCreationDate(java.util.Calendar param){

			if(param != null){
				// update the setting tracker
				localCreationDateTracker=true;
			}
			else{
				localCreationDateTracker=false;

			}

			this.localCreationDate=param;

		}

		/**
		 * field for Deadline
		 */

		protected java.util.Calendar localDeadline;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDeadlineTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Calendar
		 */
		public java.util.Calendar getDeadline(){
			return localDeadline;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Deadline
		 */
		public void setDeadline(java.util.Calendar param){

			if(param != null){
				// update the setting tracker
				localDeadlineTracker=true;
			}
			else{
				localDeadlineTracker=false;

			}

			this.localDeadline=param;

		}

		/**
		 * field for Priority
		 */

		protected int localPriority;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPriorityTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getPriority(){
			return localPriority;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Priority
		 */
		public void setPriority(int param){

			// setting primitive attribute tracker to true

			if(param == java.lang.Integer.MIN_VALUE){
				localPriorityTracker=true;

			}
			else{
				localPriorityTracker=true;
			}

			this.localPriority=param;

		}

		/**
		 * field for UserOwner This was an Array!
		 */

		protected String[] localUserOwner;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localUserOwnerTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String[]
		 */
		public String[] getUserOwner(){
			return localUserOwner;
		}

		/**
		 * validate the array for UserOwner
		 */
		protected void validateUserOwner(String[] param){

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UserOwner
		 */
		public void setUserOwner(String[] param){

			validateUserOwner(param);

			if(param != null){
				// update the setting tracker
				localUserOwnerTracker=true;
			}
			else{
				localUserOwnerTracker=false;

			}

			this.localUserOwner=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            String
		 */
		public void addUserOwner(String param){
			if(localUserOwner == null){
				localUserOwner=new String[]{};
			}

			// update the setting tracker
			localUserOwnerTracker=true;

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localUserOwner);
			list.add(param);
			this.localUserOwner=(String[]) list.toArray(new String[list.size()]);

		}
		
		protected String instanceId;

		public String getInstanceId(){
			return instanceId;
		}

		public void setInstanceId(String instanceId){
			this.instanceId=instanceId;
		}

		/**
		 * field for RoleOwner This was an Array!
		 */

		protected String[] localRoleOwner;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRoleOwnerTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String[]
		 */
		public String[] getRoleOwner(){
			return localRoleOwner;
		}

		/**
		 * validate the array for RoleOwner
		 */
		protected void validateRoleOwner(String[] param){

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RoleOwner
		 */
		public void setRoleOwner(String[] param){

			validateRoleOwner(param);

			if(param != null){
				// update the setting tracker
				localRoleOwnerTracker=true;
			}
			else{
				localRoleOwnerTracker=false;

			}

			this.localRoleOwner=param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            String
		 */
		public void addRoleOwner(String param){
			if(localRoleOwner == null){
				localRoleOwner=new String[]{};
			}

			// update the setting tracker
			localRoleOwnerTracker=true;

			java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localRoleOwner);
			list.add(param);
			this.localRoleOwner=(String[]) list.toArray(new String[list.size()]);

		}

		/**
		 * field for FormUrl
		 */

		protected org.apache.axis2.databinding.types.URI localFormUrl;

		/**
		 * Auto generated getter method
		 * 
		 * @return org.apache.axis2.databinding.types.URI
		 */
		public org.apache.axis2.databinding.types.URI getFormUrl(){
			return localFormUrl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FormUrl
		 */
		public void setFormUrl(org.apache.axis2.databinding.types.URI param){

			this.localFormUrl=param;

		}
		
		

		/**
		 * field for FailureCode
		 */

		protected String localFailureCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localFailureCodeTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getFailureCode(){
			return localFailureCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FailureCode
		 */
		public void setFailureCode(String param){

			if(param != null){
				// update the setting tracker
				localFailureCodeTracker=true;
			}
			else{
				localFailureCodeTracker=false;

			}

			this.localFailureCode=param;

		}

		/**
		 * field for FailureReason
		 */

		protected String localFailureReason;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localFailureReasonTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getFailureReason(){
			return localFailureReason;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FailureReason
		 */
		public void setFailureReason(String param){

			if(param != null){
				// update the setting tracker
				localFailureReasonTracker=true;
			}
			else{
				localFailureReasonTracker=false;

			}

			this.localFailureReason=param;

		}

		/**
		 * field for UserProcessCompleteSOAPAction
		 */

		protected String localUserProcessCompleteSOAPAction;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localUserProcessCompleteSOAPActionTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getUserProcessCompleteSOAPAction(){
			return localUserProcessCompleteSOAPAction;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UserProcessCompleteSOAPAction
		 */
		public void setUserProcessCompleteSOAPAction(String param){

			if(param != null){
				// update the setting tracker
				localUserProcessCompleteSOAPActionTracker=true;
			}
			else{
				localUserProcessCompleteSOAPActionTracker=false;

			}

			this.localUserProcessCompleteSOAPAction=param;

		}

		/**
		 * field for ProcessEndpoint
		 */

		protected org.apache.axis2.databinding.types.URI localProcessEndpoint;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localProcessEndpointTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return org.apache.axis2.databinding.types.URI
		 */
		public org.apache.axis2.databinding.types.URI getProcessEndpoint(){
			return localProcessEndpoint;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ProcessEndpoint
		 */
		public void setProcessEndpoint(org.apache.axis2.databinding.types.URI param){

			if(param != null){
				// update the setting tracker
				localProcessEndpointTracker=true;
			}
			else{
				localProcessEndpointTracker=false;

			}

			this.localProcessEndpoint=param;

		}

		/**
		 * field for InitMessageNamespaceURI
		 */

		protected org.apache.axis2.databinding.types.URI localInitMessageNamespaceURI;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInitMessageNamespaceURITracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return org.apache.axis2.databinding.types.URI
		 */
		public org.apache.axis2.databinding.types.URI getInitMessageNamespaceURI(){
			return localInitMessageNamespaceURI;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InitMessageNamespaceURI
		 */
		public void setInitMessageNamespaceURI(org.apache.axis2.databinding.types.URI param){

			if(param != null){
				// update the setting tracker
				localInitMessageNamespaceURITracker=true;
			}
			else{
				localInitMessageNamespaceURITracker=false;

			}

			this.localInitMessageNamespaceURI=param;

		}

		/**
		 * field for InitOperationSOAPAction
		 */

		protected String localInitOperationSOAPAction;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInitOperationSOAPActionTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getInitOperationSOAPAction(){
			return localInitOperationSOAPAction;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InitOperationSOAPAction
		 */
		public void setInitOperationSOAPAction(String param){

			if(param != null){
				// update the setting tracker
				localInitOperationSOAPActionTracker=true;
			}
			else{
				localInitOperationSOAPActionTracker=false;

			}

			this.localInitOperationSOAPAction=param;

		}

		/**
		 * field for IsChainedBefore
		 */

		protected String localIsChainedBefore;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localIsChainedBeforeTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getIsChainedBefore(){
			return localIsChainedBefore;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            IsChainedBefore
		 */
		public void setIsChainedBefore(String param){

			if(param != null){
				// update the setting tracker
				localIsChainedBeforeTracker=true;
			}
			else{
				localIsChainedBeforeTracker=false;

			}

			this.localIsChainedBefore=param;

		}

		/**
		 * field for PreviousTaskId
		 */

		protected String localPreviousTaskId;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPreviousTaskIdTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getPreviousTaskId(){
			return localPreviousTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PreviousTaskId
		 */
		public void setPreviousTaskId(String param){

			if(param != null){
				// update the setting tracker
				localPreviousTaskIdTracker=true;
			}
			else{
				localPreviousTaskIdTracker=false;

			}

			this.localPreviousTaskId=param;

		}

		/**
		 * field for ClaimAction
		 */

		protected AccessControlType localClaimAction;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localClaimActionTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return AccessControlType
		 */
		public AccessControlType getClaimAction(){
			return localClaimAction;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ClaimAction
		 */
		public void setClaimAction(AccessControlType param){

			if(param != null){
				// update the setting tracker
				localClaimActionTracker=true;
			}
			else{
				localClaimActionTracker=false;

			}

			this.localClaimAction=param;

		}

		/**
		 * field for RevokeAction
		 */

		protected AccessControlType localRevokeAction;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRevokeActionTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return AccessControlType
		 */
		public AccessControlType getRevokeAction(){
			return localRevokeAction;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RevokeAction
		 */
		public void setRevokeAction(AccessControlType param){

			if(param != null){
				// update the setting tracker
				localRevokeActionTracker=true;
			}
			else{
				localRevokeActionTracker=false;

			}

			this.localRevokeAction=param;

		}

		/**
		 * field for SaveAction
		 */

		protected AccessControlType localSaveAction;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSaveActionTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return AccessControlType
		 */
		public AccessControlType getSaveAction(){
			return localSaveAction;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SaveAction
		 */
		public void setSaveAction(AccessControlType param){

			if(param != null){
				// update the setting tracker
				localSaveActionTracker=true;
			}
			else{
				localSaveActionTracker=false;

			}

			this.localSaveAction=param;

		}

		/**
		 * field for CompleteAction
		 */

		protected AccessControlType localCompleteAction;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCompleteActionTracker=false;

		/**
		 * Auto generated getter method
		 * 
		 * @return AccessControlType
		 */
		public AccessControlType getCompleteAction(){
			return localCompleteAction;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CompleteAction
		 */
		public void setCompleteAction(AccessControlType param){

			if(param != null){
				// update the setting tracker
				localCompleteActionTracker=true;
			}
			else{
				localCompleteActionTracker=false;

			}

			this.localCompleteAction=param;

		}

		/**
		 * field for Attachments
		 */

		protected Attachments_type0 localAttachments;

		/**
		 * Auto generated getter method
		 * 
		 * @return Attachments_type0
		 */
		public Attachments_type0 getAttachments(){
			return localAttachments;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Attachments
		 */
		public void setAttachments(Attachments_type0 param){

			this.localAttachments=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					TaskMetadata.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":taskMetadata",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","taskMetadata",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskId",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskId");
				}

			}
			else{
				xmlWriter.writeStartElement("taskId");
			}

			if(localTaskId == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskId);

			}

			xmlWriter.writeEndElement();
			if(localTaskStateTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"taskState",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"taskState");
					}

				}
				else{
					xmlWriter.writeStartElement("taskState");
				}

				if(localTaskState == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("taskState cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskState));

				}

				xmlWriter.writeEndElement();
			}
			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskType",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskType");
				}

			}
			else{
				xmlWriter.writeStartElement("taskType");
			}

			if(localTaskType == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskType cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskType));

			}

			xmlWriter.writeEndElement();
			if(localDescriptionTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"description",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"description");
					}

				}
				else{
					xmlWriter.writeStartElement("description");
				}

				if(localDescription == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("description cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(localDescription);

				}

				xmlWriter.writeEndElement();
			}
			if(localProcessIdTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"processId",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"processId");
					}

				}
				else{
					xmlWriter.writeStartElement("processId");
				}

				if(localProcessId == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("processId cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(localProcessId);

				}

				xmlWriter.writeEndElement();
			}
			if(localCreationDateTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"creationDate",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"creationDate");
					}

				}
				else{
					xmlWriter.writeStartElement("creationDate");
				}

				if(localCreationDate == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("creationDate cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreationDate));

				}

				xmlWriter.writeEndElement();
			}
			if(localDeadlineTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"deadline",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"deadline");
					}

				}
				else{
					xmlWriter.writeStartElement("deadline");
				}

				if(localDeadline == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("deadline cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeadline));

				}

				xmlWriter.writeEndElement();
			}
			if(localPriorityTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"priority",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"priority");
					}

				}
				else{
					xmlWriter.writeStartElement("priority");
				}

				if(localPriority == java.lang.Integer.MIN_VALUE){

					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);

				}
				else{
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPriority));
				}

				xmlWriter.writeEndElement();
			}
			if(localUserOwnerTracker){
				if(localUserOwner != null){
					namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
					boolean emptyNamespace=namespace == null || namespace.length() == 0;
					prefix=emptyNamespace ? null : xmlWriter.getPrefix(namespace);
					for(int i=0;i < localUserOwner.length;i++){

						if(localUserOwner[i] != null){

							if(!emptyNamespace){
								if(prefix == null){
									String prefix2=generatePrefix(namespace);

									xmlWriter.writeStartElement(prefix2,"userOwner",namespace);
									xmlWriter.writeNamespace(prefix2,namespace);
									xmlWriter.setPrefix(prefix2,namespace);

								}
								else{
									xmlWriter.writeStartElement(namespace,"userOwner");
								}

							}
							else{
								xmlWriter.writeStartElement("userOwner");
							}

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserOwner[i]));

							xmlWriter.writeEndElement();

						}
						else{

							// we have to do nothing since minOccurs is zero

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("userOwner cannot be null!!");

				}

			}
			if(localRoleOwnerTracker){
				if(localRoleOwner != null){
					namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
					boolean emptyNamespace=namespace == null || namespace.length() == 0;
					prefix=emptyNamespace ? null : xmlWriter.getPrefix(namespace);
					for(int i=0;i < localRoleOwner.length;i++){

						if(localRoleOwner[i] != null){

							if(!emptyNamespace){
								if(prefix == null){
									String prefix2=generatePrefix(namespace);

									xmlWriter.writeStartElement(prefix2,"roleOwner",namespace);
									xmlWriter.writeNamespace(prefix2,namespace);
									xmlWriter.setPrefix(prefix2,namespace);

								}
								else{
									xmlWriter.writeStartElement(namespace,"roleOwner");
								}

							}
							else{
								xmlWriter.writeStartElement("roleOwner");
							}

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoleOwner[i]));

							xmlWriter.writeEndElement();

						}
						else{

							// we have to do nothing since minOccurs is zero

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("roleOwner cannot be null!!");

				}

			}
			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"formUrl",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"formUrl");
				}

			}
			else{
				xmlWriter.writeStartElement("formUrl");
			}

			if(localFormUrl == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("formUrl cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFormUrl));

			}

			xmlWriter.writeEndElement();
			if(localFailureCodeTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"failureCode",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"failureCode");
					}

				}
				else{
					xmlWriter.writeStartElement("failureCode");
				}

				if(localFailureCode == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("failureCode cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(localFailureCode);

				}

				xmlWriter.writeEndElement();
			}
			if(localFailureReasonTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"failureReason",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"failureReason");
					}

				}
				else{
					xmlWriter.writeStartElement("failureReason");
				}

				if(localFailureReason == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("failureReason cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(localFailureReason);

				}

				xmlWriter.writeEndElement();
			}
			if(localUserProcessCompleteSOAPActionTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"userProcessCompleteSOAPAction",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"userProcessCompleteSOAPAction");
					}

				}
				else{
					xmlWriter.writeStartElement("userProcessCompleteSOAPAction");
				}

				if(localUserProcessCompleteSOAPAction == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("userProcessCompleteSOAPAction cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(localUserProcessCompleteSOAPAction);

				}

				xmlWriter.writeEndElement();
			}
			if(localProcessEndpointTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"processEndpoint",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"processEndpoint");
					}

				}
				else{
					xmlWriter.writeStartElement("processEndpoint");
				}

				if(localProcessEndpoint == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("processEndpoint cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessEndpoint));

				}

				xmlWriter.writeEndElement();
			}
			if(localInitMessageNamespaceURITracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"initMessageNamespaceURI",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"initMessageNamespaceURI");
					}

				}
				else{
					xmlWriter.writeStartElement("initMessageNamespaceURI");
				}

				if(localInitMessageNamespaceURI == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("initMessageNamespaceURI cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInitMessageNamespaceURI));

				}

				xmlWriter.writeEndElement();
			}
			if(localInitOperationSOAPActionTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"initOperationSOAPAction",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"initOperationSOAPAction");
					}

				}
				else{
					xmlWriter.writeStartElement("initOperationSOAPAction");
				}

				if(localInitOperationSOAPAction == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("initOperationSOAPAction cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(localInitOperationSOAPAction);

				}

				xmlWriter.writeEndElement();
			}
			if(localIsChainedBeforeTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"isChainedBefore",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"isChainedBefore");
					}

				}
				else{
					xmlWriter.writeStartElement("isChainedBefore");
				}

				if(localIsChainedBefore == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("isChainedBefore cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(localIsChainedBefore);

				}

				xmlWriter.writeEndElement();
			}
			if(localPreviousTaskIdTracker){
				namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
				if(!namespace.equals("")){
					prefix=xmlWriter.getPrefix(namespace);

					if(prefix == null){
						prefix=generatePrefix(namespace);

						xmlWriter.writeStartElement(prefix,"previousTaskId",namespace);
						xmlWriter.writeNamespace(prefix,namespace);
						xmlWriter.setPrefix(prefix,namespace);

					}
					else{
						xmlWriter.writeStartElement(namespace,"previousTaskId");
					}

				}
				else{
					xmlWriter.writeStartElement("previousTaskId");
				}

				if(localPreviousTaskId == null){
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException("previousTaskId cannot be null!!");

				}
				else{

					xmlWriter.writeCharacters(localPreviousTaskId);

				}

				xmlWriter.writeEndElement();
			}
			if(localClaimActionTracker){
				if(localClaimAction == null){
					throw new org.apache.axis2.databinding.ADBException("claimAction cannot be null!!");
				}
				localClaimAction.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","claimAction"),factory,xmlWriter);
			}
			if(localRevokeActionTracker){
				if(localRevokeAction == null){
					throw new org.apache.axis2.databinding.ADBException("revokeAction cannot be null!!");
				}
				localRevokeAction.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","revokeAction"),factory,xmlWriter);
			}
			if(localSaveActionTracker){
				if(localSaveAction == null){
					throw new org.apache.axis2.databinding.ADBException("saveAction cannot be null!!");
				}
				localSaveAction.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","saveAction"),factory,xmlWriter);
			}
			if(localCompleteActionTracker){
				if(localCompleteAction == null){
					throw new org.apache.axis2.databinding.ADBException("completeAction cannot be null!!");
				}
				localCompleteAction.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","completeAction"),factory,xmlWriter);
			}
			if(localAttachments == null){
				throw new org.apache.axis2.databinding.ADBException("attachments cannot be null!!");
			}
			localAttachments.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachments"),factory,xmlWriter);

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));

			if(localTaskId != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");
			}
			if(localTaskStateTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskState"));

				if(localTaskState != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskState));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("taskState cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskType"));

			if(localTaskType != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskType));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskType cannot be null!!");
			}
			if(localDescriptionTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","description"));

				if(localDescription != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("description cannot be null!!");
				}
			}
			if(localProcessIdTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","processId"));

				if(localProcessId != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessId));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("processId cannot be null!!");
				}
			}
			if(localCreationDateTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","creationDate"));

				if(localCreationDate != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreationDate));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("creationDate cannot be null!!");
				}
			}
			if(localDeadlineTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","deadline"));

				if(localDeadline != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeadline));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("deadline cannot be null!!");
				}
			}
			if(localPriorityTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","priority"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPriority));
			}
			if(localUserOwnerTracker){
				if(localUserOwner != null){
					for(int i=0;i < localUserOwner.length;i++){

						if(localUserOwner[i] != null){
							elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","userOwner"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserOwner[i]));
						}
						else{

							// have to do nothing

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("userOwner cannot be null!!");

				}

			}
			if(localRoleOwnerTracker){
				if(localRoleOwner != null){
					for(int i=0;i < localRoleOwner.length;i++){

						if(localRoleOwner[i] != null){
							elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","roleOwner"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoleOwner[i]));
						}
						else{

							// have to do nothing

						}

					}
				}
				else{

					throw new org.apache.axis2.databinding.ADBException("roleOwner cannot be null!!");

				}

			}
			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","formUrl"));

			if(localFormUrl != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFormUrl));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("formUrl cannot be null!!");
			}
			if(localFailureCodeTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","failureCode"));

				if(localFailureCode != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFailureCode));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("failureCode cannot be null!!");
				}
			}
			if(localFailureReasonTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","failureReason"));

				if(localFailureReason != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFailureReason));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("failureReason cannot be null!!");
				}
			}
			if(localUserProcessCompleteSOAPActionTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","userProcessCompleteSOAPAction"));

				if(localUserProcessCompleteSOAPAction != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserProcessCompleteSOAPAction));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("userProcessCompleteSOAPAction cannot be null!!");
				}
			}
			if(localProcessEndpointTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","processEndpoint"));

				if(localProcessEndpoint != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProcessEndpoint));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("processEndpoint cannot be null!!");
				}
			}
			if(localInitMessageNamespaceURITracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","initMessageNamespaceURI"));

				if(localInitMessageNamespaceURI != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInitMessageNamespaceURI));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("initMessageNamespaceURI cannot be null!!");
				}
			}
			if(localInitOperationSOAPActionTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","initOperationSOAPAction"));

				if(localInitOperationSOAPAction != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInitOperationSOAPAction));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("initOperationSOAPAction cannot be null!!");
				}
			}
			if(localIsChainedBeforeTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","isChainedBefore"));

				if(localIsChainedBefore != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsChainedBefore));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("isChainedBefore cannot be null!!");
				}
			}
			if(localPreviousTaskIdTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","previousTaskId"));

				if(localPreviousTaskId != null){
					elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPreviousTaskId));
				}
				else{
					throw new org.apache.axis2.databinding.ADBException("previousTaskId cannot be null!!");
				}
			}
			if(localClaimActionTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","claimAction"));

				if(localClaimAction == null){
					throw new org.apache.axis2.databinding.ADBException("claimAction cannot be null!!");
				}
				elementList.add(localClaimAction);
			}
			if(localRevokeActionTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","revokeAction"));

				if(localRevokeAction == null){
					throw new org.apache.axis2.databinding.ADBException("revokeAction cannot be null!!");
				}
				elementList.add(localRevokeAction);
			}
			if(localSaveActionTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","saveAction"));

				if(localSaveAction == null){
					throw new org.apache.axis2.databinding.ADBException("saveAction cannot be null!!");
				}
				elementList.add(localSaveAction);
			}
			if(localCompleteActionTracker){
				elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","completeAction"));

				if(localCompleteAction == null){
					throw new org.apache.axis2.databinding.ADBException("completeAction cannot be null!!");
				}
				elementList.add(localCompleteAction);
			}
			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachments"));

			if(localAttachments == null){
				throw new org.apache.axis2.databinding.ADBException("attachments cannot be null!!");
			}
			elementList.add(localAttachments);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TaskMetadata parse(XMLStreamReader reader) throws java.lang.Exception{
				TaskMetadata object=new TaskMetadata();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"taskMetadata".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (TaskMetadata) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					java.util.ArrayList list9=new java.util.ArrayList();

					java.util.ArrayList list10=new java.util.ArrayList();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskState").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTaskState(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskType").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTaskType(org.apache.axis2.databinding.utils.ConverterUtil.convertToToken(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						//throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","description").equals(reader.getName())){

						String content=reader.getElementText();

						object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","processId").equals(reader.getName())){

						String content=reader.getElementText();

						object.setProcessId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}
					
					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","instanceId").equals(reader.getName())){
						String content=reader.getElementText();

						object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","creationDate").equals(reader.getName())){

						String content=reader.getElementText();

						object.setCreationDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}
					
					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","userOwner").equals(reader.getName())){

						// Process the array and step past its final element's
						// end.
						list9.add(reader.getElementText());

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone9=false;
						while(!loopDone9){
							// Ensure we are at the EndElement
							while(!reader.isEndElement()){
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone9=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","userOwner").equals(reader.getName())){
									list9.add(reader.getElementText());

								}
								else{
									loopDone9=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setUserOwner((String[]) list9.toArray(new String[list9.size()]));

					} // End of if for expected property start element

					else{

					}
					
					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","roleOwner").equals(reader.getName())){

						// Process the array and step past its final element's
						// end.
						list10.add(reader.getElementText());

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone10=false;
						while(!loopDone10){
							// Ensure we are at the EndElement
							while(!reader.isEndElement()){
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while(!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if(reader.isEndElement()){
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone10=true;
							}
							else{
								if(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","roleOwner").equals(reader.getName())){
									list10.add(reader.getElementText());

								}
								else{
									loopDone10=true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setRoleOwner((String[]) list10.toArray(new String[list10.size()]));

					} // End of if for expected property start element

					else{

					}
					
					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","formUrl").equals(reader.getName())){

						String content=reader.getElementText();

						object.setFormUrl(org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						//throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}
					
					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","userProcessCompleteSOAPAction").equals(reader.getName())){

						String content=reader.getElementText();

						object.setUserProcessCompleteSOAPAction(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}
					
					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","processEndpoint").equals(reader.getName())){

						String content=reader.getElementText();

						object.setProcessEndpoint(org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}
					
					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","initMessageNamespaceURI").equals(reader.getName())){

						String content=reader.getElementText();

						object.setInitMessageNamespaceURI(org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}
					
					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","initOperationSOAPAction").equals(reader.getName())){

						String content=reader.getElementText();

						object.setInitOperationSOAPAction(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}
					
					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","isChainedBefore").equals(reader.getName())){

						String content=reader.getElementText();

						object.setIsChainedBefore(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}
					
					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachments").equals(reader.getName())){

						object.setAttachments(Attachments_type0.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						//throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","deadline").equals(reader.getName())){

						String content=reader.getElementText();

						object.setDeadline(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","priority").equals(reader.getName())){

						nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
						if(!"true".equals(nillableValue) && !"1".equals(nillableValue)){

							String content=reader.getElementText();

							object.setPriority(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						}
						else{

							object.setPriority(java.lang.Integer.MIN_VALUE);

							reader.getElementText(); // throw away text nodes if
														// any.
						}

						reader.next();

					} // End of if for expected property start element

					else{

						object.setPriority(java.lang.Integer.MIN_VALUE);

					}					

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","failureCode").equals(reader.getName())){

						String content=reader.getElementText();

						object.setFailureCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","failureReason").equals(reader.getName())){

						String content=reader.getElementText();

						object.setFailureReason(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}
					
					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","previousTaskId").equals(reader.getName())){

						String content=reader.getElementText();

						object.setPreviousTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","claimAction").equals(reader.getName())){

						object.setClaimAction(AccessControlType.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","revokeAction").equals(reader.getName())){

						object.setRevokeAction(AccessControlType.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","saveAction").equals(reader.getName())){

						object.setSaveAction(AccessControlType.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","completeAction").equals(reader.getName())){

						object.setCompleteAction(AccessControlType.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{

					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class RemoveAttachmentRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","removeAttachmentRequest","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId
		 */

		protected String localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getTaskId(){
			return localTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(String param){

			this.localTaskId=param;

		}

		/**
		 * field for AttachmentUrl
		 */

		protected String localAttachmentUrl;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getAttachmentUrl(){
			return localAttachmentUrl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AttachmentUrl
		 */
		public void setAttachmentUrl(String param){

			this.localAttachmentUrl=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					RemoveAttachmentRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":removeAttachmentRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","removeAttachmentRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskId",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskId");
				}

			}
			else{
				xmlWriter.writeStartElement("taskId");
			}

			if(localTaskId == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskId);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"attachmentUrl",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"attachmentUrl");
				}

			}
			else{
				xmlWriter.writeStartElement("attachmentUrl");
			}

			if(localAttachmentUrl == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("attachmentUrl cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localAttachmentUrl);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));

			if(localTaskId != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachmentUrl"));

			if(localAttachmentUrl != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAttachmentUrl));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("attachmentUrl cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static RemoveAttachmentRequest parse(XMLStreamReader reader) throws java.lang.Exception{
				RemoveAttachmentRequest object=new RemoveAttachmentRequest();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"removeAttachmentRequest".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (RemoveAttachmentRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","attachmentUrl").equals(reader.getName())){

						String content=reader.getElementText();

						object.setAttachmentUrl(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class CompleteRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","completeRequest","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId
		 */

		protected String localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getTaskId(){
			return localTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(String param){

			this.localTaskId=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					CompleteRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":completeRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","completeRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskId",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskId");
				}

			}
			else{
				xmlWriter.writeStartElement("taskId");
			}

			if(localTaskId == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskId);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));

			if(localTaskId != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static CompleteRequest parse(XMLStreamReader reader) throws java.lang.Exception{
				CompleteRequest object=new CompleteRequest();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"completeRequest".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (CompleteRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetAvailableTasks implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getAvailableTasks","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for In
		 */

		protected String localIn;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getIn(){
			return localIn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            In
		 */
		public void setIn(String param){

			this.localIn=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					GetAvailableTasks.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":getAvailableTasks",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","getAvailableTasks",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"in",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"in");
				}

			}
			else{
				xmlWriter.writeStartElement("in");
			}

			if(localIn == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("in cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localIn);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","in"));

			if(localIn != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIn));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("in cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GetAvailableTasks parse(XMLStreamReader reader) throws java.lang.Exception{
				GetAvailableTasks object=new GetAvailableTasks();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"getAvailableTasks".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetAvailableTasks) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","in").equals(reader.getName())){

						String content=reader.getElementText();

						object.setIn(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class FailRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","failRequest","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for TaskId
		 */

		protected String localTaskId;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getTaskId(){
			return localTaskId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TaskId
		 */
		public void setTaskId(String param){

			this.localTaskId=param;

		}

		/**
		 * field for Code
		 */

		protected String localCode;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getCode(){
			return localCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Code
		 */
		public void setCode(String param){

			this.localCode=param;

		}

		/**
		 * field for Message
		 */

		protected String localMessage;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getMessage(){
			return localMessage;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Message
		 */
		public void setMessage(String param){

			this.localMessage=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					FailRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":failRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","failRequest",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"taskId",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"taskId");
				}

			}
			else{
				xmlWriter.writeStartElement("taskId");
			}

			if(localTaskId == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTaskId);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"code",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"code");
				}

			}
			else{
				xmlWriter.writeStartElement("code");
			}

			if(localCode == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("code cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localCode);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"message",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"message");
				}

			}
			else{
				xmlWriter.writeStartElement("message");
			}

			if(localMessage == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("message cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localMessage);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId"));

			if(localTaskId != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTaskId));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("taskId cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","code"));

			if(localCode != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCode));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("code cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","message"));

			if(localMessage != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessage));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("message cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static FailRequest parse(XMLStreamReader reader) throws java.lang.Exception{
				FailRequest object=new FailRequest();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"failRequest".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (FailRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","taskId").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTaskId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","code").equals(reader.getName())){

						String content=reader.getElementText();

						object.setCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","message").equals(reader.getName())){

						String content=reader.getElementText();

						object.setMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetPipaResponse implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","getPipaResponse","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Task
		 */

		protected Task localTask;

		/**
		 * Auto generated getter method
		 * 
		 * @return Task
		 */
		public Task getTask(){
			return localTask;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Task
		 */
		public void setTask(Task param){

			this.localTask=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					GetPipaResponse.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":getPipaResponse",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","getPipaResponse",xmlWriter);
				}

			}

			if(localTask == null){
				throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");
			}
			localTask.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"),factory,xmlWriter);

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"));

			if(localTask == null){
				throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");
			}
			elementList.add(localTask);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GetPipaResponse parse(XMLStreamReader reader) throws java.lang.Exception{
				GetPipaResponse object=new GetPipaResponse();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"getPipaResponse".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetPipaResponse) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task").equals(reader.getName())){

						object.setTask(Task.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AttachmentMetadata implements org.apache.axis2.databinding.ADBBean{
		/*
		 * This type was generated from the piece of schema that had name =
		 * attachmentMetadata Namespace URI =
		 * http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/
		 * Namespace Prefix = ns1
		 */

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for MimeType
		 */

		protected String localMimeType;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getMimeType(){
			return localMimeType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MimeType
		 */
		public void setMimeType(String param){

			this.localMimeType=param;

		}

		/**
		 * field for FileName
		 */

		protected String localFileName;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getFileName(){
			return localFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FileName
		 */
		public void setFileName(String param){

			this.localFileName=param;

		}

		/**
		 * field for Title
		 */

		protected String localTitle;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getTitle(){
			return localTitle;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Title
		 */
		public void setTitle(String param){

			this.localTitle=param;

		}

		/**
		 * field for Description
		 */

		protected String localDescription;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getDescription(){
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(String param){

			this.localDescription=param;

		}

		/**
		 * field for CreationDate
		 */

		protected java.util.Calendar localCreationDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Calendar
		 */
		public java.util.Calendar getCreationDate(){
			return localCreationDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CreationDate
		 */
		public void setCreationDate(java.util.Calendar param){

			this.localCreationDate=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					AttachmentMetadata.this.serialize(parentQName,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":attachmentMetadata",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","attachmentMetadata",xmlWriter);
				}

			}

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"mimeType",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"mimeType");
				}

			}
			else{
				xmlWriter.writeStartElement("mimeType");
			}

			if(localMimeType == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("mimeType cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localMimeType);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"fileName",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"fileName");
				}

			}
			else{
				xmlWriter.writeStartElement("fileName");
			}

			if(localFileName == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("fileName cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localFileName);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"title",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"title");
				}

			}
			else{
				xmlWriter.writeStartElement("title");
			}

			if(localTitle == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("title cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localTitle);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"description",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"description");
				}

			}
			else{
				xmlWriter.writeStartElement("description");
			}

			if(localDescription == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("description cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localDescription);

			}

			xmlWriter.writeEndElement();

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"creationDate",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"creationDate");
				}

			}
			else{
				xmlWriter.writeStartElement("creationDate");
			}

			if(localCreationDate == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("creationDate cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreationDate));

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","mimeType"));

			if(localMimeType != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMimeType));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("mimeType cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","fileName"));

			if(localFileName != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileName));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("fileName cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","title"));

			if(localTitle != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTitle));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("title cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","description"));

			if(localDescription != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("description cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","creationDate"));

			if(localCreationDate != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreationDate));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("creationDate cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AttachmentMetadata parse(XMLStreamReader reader) throws java.lang.Exception{
				AttachmentMetadata object=new AttachmentMetadata();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"attachmentMetadata".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AttachmentMetadata) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","mimeType").equals(reader.getName())){

						String content=reader.getElementText();

						object.setMimeType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","fileName").equals(reader.getName())){

						String content=reader.getElementText();

						object.setFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","title").equals(reader.getName())){

						String content=reader.getElementText();

						object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","description").equals(reader.getName())){

						String content=reader.getElementText();

						object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","creationDate").equals(reader.getName())){

						String content=reader.getElementText();

						object.setCreationDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class StorePipaRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","storePipaRequest","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Task
		 */

		protected Task localTask;

		/**
		 * Auto generated getter method
		 * 
		 * @return Task
		 */
		public Task getTask(){
			return localTask;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Task
		 */
		public void setTask(Task param){

			this.localTask=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					StorePipaRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":storePipaRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","storePipaRequest",xmlWriter);
				}

			}

			if(localTask == null){
				throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");
			}
			localTask.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"),factory,xmlWriter);

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"));

			if(localTask == null){
				throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");
			}
			elementList.add(localTask);

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static StorePipaRequest parse(XMLStreamReader reader) throws java.lang.Exception{
				StorePipaRequest object=new StorePipaRequest();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"storePipaRequest".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (StorePipaRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task").equals(reader.getName())){

						object.setTask(Task.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class CreateRequest implements org.apache.axis2.databinding.ADBBean{

		public static final javax.xml.namespace.QName MY_QNAME=new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","createRequest","ns1");

		private static String generatePrefix(String namespace){
			if(namespace.equals("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/")){
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * field for Task
		 */

		protected Task localTask;

		/**
		 * Auto generated getter method
		 * 
		 * @return Task
		 */
		public Task getTask(){
			return localTask;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Task
		 */
		public void setTask(Task param){

			this.localTask=param;

		}

		/**
		 * field for ParticipantToken
		 */

		protected String localParticipantToken;

		/**
		 * Auto generated getter method
		 * 
		 * @return String
		 */
		public String getParticipantToken(){
			return localParticipantToken;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParticipantToken
		 */
		public void setParticipantToken(String param){

			this.localParticipantToken=param;

		}

		/**
		 * isReaderMTOMAware
		 * 
		 * @return true if the reader supports MTOM
		 */
		public static boolean isReaderMTOMAware(XMLStreamReader reader){
			boolean isReaderMTOMAware=false;

			try{
				isReaderMTOMAware=java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
			}
			catch(java.lang.IllegalArgumentException e){
				isReaderMTOMAware=false;
			}
			return isReaderMTOMAware;
		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

			org.apache.axiom.om.OMDataSource dataSource=new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

				public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
					CreateRequest.this.serialize(MY_QNAME,factory,xmlWriter);
				}
			};
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,factory,dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{
			serialize(parentQName,factory,xmlWriter,false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,final org.apache.axiom.om.OMFactory factory,org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,boolean serializeType) throws javax.xml.stream.XMLStreamException,org.apache.axis2.databinding.ADBException{

			String prefix=null;
			String namespace=null;

			prefix=parentQName.getPrefix();
			namespace=parentQName.getNamespaceURI();

			if((namespace != null) && (namespace.trim().length() > 0)){
				String writerPrefix=xmlWriter.getPrefix(namespace);
				if(writerPrefix != null){
					xmlWriter.writeStartElement(namespace,parentQName.getLocalPart());
				}
				else{
					if(prefix == null){
						prefix=generatePrefix(namespace);
					}

					xmlWriter.writeStartElement(prefix,parentQName.getLocalPart(),namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);
				}
			}
			else{
				xmlWriter.writeStartElement(parentQName.getLocalPart());
			}

			if(serializeType){

				String namespacePrefix=registerPrefix(xmlWriter,"http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/");
				if((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",namespacePrefix + ":createRequest",xmlWriter);
				}
				else{
					writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type","createRequest",xmlWriter);
				}

			}

			if(localTask == null){
				throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");
			}
			localTask.serialize(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"),factory,xmlWriter);

			namespace="http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/";
			if(!namespace.equals("")){
				prefix=xmlWriter.getPrefix(namespace);

				if(prefix == null){
					prefix=generatePrefix(namespace);

					xmlWriter.writeStartElement(prefix,"participantToken",namespace);
					xmlWriter.writeNamespace(prefix,namespace);
					xmlWriter.setPrefix(prefix,namespace);

				}
				else{
					xmlWriter.writeStartElement(namespace,"participantToken");
				}

			}
			else{
				xmlWriter.writeStartElement("participantToken");
			}

			if(localParticipantToken == null){
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");

			}
			else{

				xmlWriter.writeCharacters(localParticipantToken);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(String prefix,String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(xmlWriter.getPrefix(namespace) == null){
				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);

			}

			xmlWriter.writeAttribute(namespace,attName,attValue);

		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(String namespace,String attName,String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(String namespace,String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			String attributeNamespace=qname.getNamespaceURI();
			String attributePrefix=xmlWriter.getPrefix(attributeNamespace);
			if(attributePrefix == null){
				attributePrefix=registerPrefix(xmlWriter,attributeNamespace);
			}
			String attributeValue;
			if(attributePrefix.trim().length() > 0){
				attributeValue=attributePrefix + ":" + qname.getLocalPart();
			}
			else{
				attributeValue=qname.getLocalPart();
			}

			if(namespace.equals("")){
				xmlWriter.writeAttribute(attName,attributeValue);
			}
			else{
				registerPrefix(xmlWriter,namespace);
				xmlWriter.writeAttribute(namespace,attName,attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
			String namespaceURI=qname.getNamespaceURI();
			if(namespaceURI != null){
				String prefix=xmlWriter.getPrefix(namespaceURI);
				if(prefix == null){
					prefix=generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix,namespaceURI);
					xmlWriter.setPrefix(prefix,namespaceURI);
				}

				if(prefix.trim().length() > 0){
					xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}
				else{
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			}
			else{
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{

			if(qnames != null){
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				StringBuffer stringToWrite=new StringBuffer();
				String namespaceURI=null;
				String prefix=null;

				for(int i=0;i < qnames.length;i++){
					if(i > 0){
						stringToWrite.append(" ");
					}
					namespaceURI=qnames[i].getNamespaceURI();
					if(namespaceURI != null){
						prefix=xmlWriter.getPrefix(namespaceURI);
						if((prefix == null) || (prefix.length() == 0)){
							prefix=generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix,namespaceURI);
							xmlWriter.setPrefix(prefix,namespaceURI);
						}

						if(prefix.trim().length() > 0){
							stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
						else{
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					}
					else{
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,String namespace) throws javax.xml.stream.XMLStreamException{
			String prefix=xmlWriter.getPrefix(namespace);

			if(prefix == null){
				prefix=generatePrefix(namespace);

				while(xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null){
					prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}

				xmlWriter.writeNamespace(prefix,namespace);
				xmlWriter.setPrefix(prefix,namespace);
			}

			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public XMLStreamReader getPullParser(javax.xml.namespace.QName qName) throws org.apache.axis2.databinding.ADBException{

			java.util.ArrayList elementList=new java.util.ArrayList();
			java.util.ArrayList attribList=new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task"));

			if(localTask == null){
				throw new org.apache.axis2.databinding.ADBException("task cannot be null!!");
			}
			elementList.add(localTask);

			elementList.add(new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken"));

			if(localParticipantToken != null){
				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParticipantToken));
			}
			else{
				throw new org.apache.axis2.databinding.ADBException("participantToken cannot be null!!");
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,elementList.toArray(),attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory{

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static CreateRequest parse(XMLStreamReader reader) throws Exception{
				CreateRequest object=new CreateRequest();

				int event;
				String nillableValue=null;
				String prefix="";
				String namespaceuri="";
				try{

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null){
						String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");
						if(fullTypeName != null){
							String nsPrefix=null;
							if(fullTypeName.indexOf(":") > -1){
								nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));
							}
							nsPrefix=nsPrefix == null ? "" : nsPrefix;

							String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if(!"createRequest".equals(type)){
								// find namespace for the prefix
								String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (CreateRequest) ExtensionMapper.getTypeObject(nsUri,type,reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes=new java.util.Vector();

					reader.next();

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new javax.xml.namespace.QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","task").equals(reader.getName())){

						object.setTask(Task.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement() && new QName("http://www.intalio.com/BPMS/Workflow/TaskManagementServices-20051109/","participantToken").equals(reader.getName())){

						String content=reader.getElementText();

						object.setParticipantToken(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else{
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new ADBException("Unexpected subelement " + reader.getLocalName());
					}

					while(!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if(reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new ADBException("Unexpected subelement " + reader.getLocalName());

				}
				catch(javax.xml.stream.XMLStreamException e){
					throw new Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeletePipaRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeletePipaRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InvalidInputMessageFault param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InvalidInputMessageFault.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.UnavailableTaskFault param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.UnavailableTaskFault.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InvalidParticipantTokenFault param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InvalidParticipantTokenFault.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskResponse param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskResponse.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.RemoveAttachmentRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.RemoveAttachmentRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.UnavailableAttachmentFault param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.UnavailableAttachmentFault.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksResponse param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksResponse.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CreateRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CreateRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AccessDeniedFault param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AccessDeniedFault.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InitRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InitRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.ReassignRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.ReassignRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CompleteRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CompleteRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputAndCompleteRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputAndCompleteRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsResponse param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsResponse.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaResponse param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaResponse.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteAllRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteAllRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AddAttachmentRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AddAttachmentRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.StorePipaRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.StorePipaRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListResponse param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListResponse.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.FailRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{
			return param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.FailRequest.MY_QNAME,org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeletePipaRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeletePipaRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.RemoveAttachmentRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.RemoveAttachmentRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CreateRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CreateRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InitRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InitRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.ReassignRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.ReassignRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CompleteRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CompleteRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputAndCompleteRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputAndCompleteRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteAllRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteAllRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AddAttachmentRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AddAttachmentRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.StorePipaRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.StorePipaRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.FailRequest param,boolean optimizeContent) throws org.apache.axis2.AxisFault{

		try{

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope=factory.getDefaultEnvelope();
			emptyEnvelope.getBody().addChild(param.getOMElement(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.FailRequest.MY_QNAME,factory));
			return emptyEnvelope;
		}
		catch(ADBException e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	/**
	 * get the default envelope
	 */
	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
		return factory.getDefaultEnvelope();
	}

	private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,java.lang.Class type,java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

		try{

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeletePipaRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeletePipaRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.OkResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InvalidInputMessageFault.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InvalidInputMessageFault.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.UnavailableTaskFault.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.UnavailableTaskFault.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InvalidParticipantTokenFault.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InvalidParticipantTokenFault.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskResponse.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.RemoveAttachmentRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.RemoveAttachmentRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.UnavailableAttachmentFault.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.UnavailableAttachmentFault.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksResponse.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAvailableTasksResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CreateRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CreateRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AccessDeniedFault.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AccessDeniedFault.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InitRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.InitRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.ReassignRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.ReassignRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CompleteRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.CompleteRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputAndCompleteRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.SetOutputAndCompleteRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsResponse.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetAttachmentsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaResponse.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetPipaResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteAllRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteAllRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AddAttachmentRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.AddAttachmentRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.StorePipaRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.StorePipaRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListResponse.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.GetTaskListResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.DeleteRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if(org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.FailRequest.class.equals(type)){

				return org.ositran.webservice.clientes.intalio.TaskManagementServicesStub.FailRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

		}
		catch(Exception e){
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
		return null;
	}

}
