package org.osinerg.filters;


import javax.servlet.Filter;
import javax.servlet.FilterConfig;
import javax.servlet.ServletResponse;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.FilterChain;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;

import org.osinerg.services.LoginService;
import org.osinerg.utils.Constantes;
import org.osinerg.utils.UtilEncrip;
import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.btg.osinergmin.siged.domain.Usuario;

import java.io.IOException;



/**
 * Clase que actua como cortafuegos para todos los accesos 
 * no autorizados al sistema.
 * Garantiza que para ejecutar las operaciones del sistema el usuario
 * haya pasado por la ventana de login.
 * @author ACOTRINA
 * @modificado Sergio Buchelli 
 */
public class SecurityFilter implements Filter
{
  /** Objeto con los datos de configuracion del filtro. */

	private static Logger logger=Logger.getLogger(SecurityFilter.class);
	
	private FilterConfig filterConfig=null;
	
	private LoginService loginService;
	
	/*public SecurityFilter(LoginService loginService){
		this.loginService=loginService;
	}*/

	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException{
		if(request instanceof HttpServletRequest){
			HttpServletRequest objRequest=(HttpServletRequest)request;
			objRequest.setCharacterEncoding("UTF-8");
			HttpServletResponse miResponse=null;
			String uri=objRequest.getRequestURI();
			//logger.debug("Uri solicitada="+uri);
			if(response instanceof HttpServletResponse){
				miResponse=(HttpServletResponse) response;
				if(uri.indexOf("qasFileDownload")<0){
					miResponse.setHeader("Cache-Control","no-cache");
					miResponse.setHeader("Pragma","no-cache");
					miResponse.setHeader("Expires","0");
					miResponse.setCharacterEncoding("UTF-8");
				}
			}
			if(!uri.contains("service") && !uri.contains("axis2-web") && !uri.contains("/remote/") && !uri.contains("uploadExternalFile")){
				String error=filterConfig.getInitParameter("error");
				if(error==null || error.equals("")){
					error="/error/errorLogin.html";
				}
				boolean correcto=false;
				boolean logout=false;
				HttpSession sesion=objRequest.getSession();
				if(sesion!=null){
					if(uri.endsWith("login.action")){
						logout=true;
					}
					String sessionId=objRequest.getParameter("session");
					String cadenaEnc=objRequest.getParameter("xxyyxxx");
					String rol=objRequest.getParameter("rol");
					String usu=null;				
					if(sessionId!=null && !sessionId.equals("") && cadenaEnc!=null && !cadenaEnc.equals("")){
						cadenaEnc=cadenaEnc.replaceAll(" ", "+");
						String cadenaDes;
						try{
							cadenaDes=UtilEncrip.decrypt(sessionId, cadenaEnc);					
							usu=getUsername(cadenaDes);
						}
						catch(Exception e){
							logger.error("No se pudo desencriptar la sesion.");						
						}
					}
					Usuario usuario=(Usuario)sesion.getAttribute(Constantes.SESSION_USUARIO);
					if(usuario!=null){
						// ya existe un usuario en sesion
						correcto=true;
						//verificamos que el usuario que esta ingresando sea el mismo que esta en sesion					
						if(usu!=null && !usuario.getUsuario().equals(usu)){
							correcto=false;
							logger.warn("El usuario "+usu+" esta intentando iniciar sesion, pero el usuario "+usuario.getUsuario()+" ya esta en sesion.");
							error="/error/enSesion.html";
						}
						//si es el mismo usuario, pero ha cambiado de rol
						if(rol!=null && usuario.getRol()!=null && !usuario.getRol().getNombre().equals(rol)){
							loginService.asignarRol(usuario,rol,objRequest);
						}
						/*else if(rol==null){
							//el rol es de user
							usuario.setRol(null);
						}*/
					}
					else{
						//ponemos al usuario en sesion
						if(usu!=null){
							if(loginService.loginSeguridad(usu,rol,objRequest)){
								correcto=true;
							}
						}
					}
				}
				if(correcto){
					chain.doFilter(objRequest,miResponse);
				}
				else{
					if(logout){
						error="/error/finSesion.html";
					}
					request.getRequestDispatcher(error).forward(objRequest,miResponse);
				}
			}
			else{
				chain.doFilter(objRequest,miResponse);
			}
		}
	}


	public void init(FilterConfig fConfig) throws ServletException {
		this.filterConfig=fConfig;
		ApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(filterConfig.getServletContext());
		loginService=(LoginService) ctx.getBean("loginService");
	}

	public void destroy(){}
        
        ////////////////////////////////////////////////////
        
        
	/*private String getFecha(String cadenaDes) {
		String pfecha = null;
		if (cadenaDes != null) {
			int index = cadenaDes.lastIndexOf("=");
			pfecha = cadenaDes.substring(index + 1);
		}
		//logger.debug("pfecha " + pfecha);
		return pfecha;
	}

	private String getIp(String cadenaDes) {
		String ip = null;
		if (cadenaDes != null) {
			int index = cadenaDes.indexOf("&");
			ip = getPassword(cadenaDes.substring(index+1));
		}
		//logger.debug("ip " + ip);
		return ip;
	}

	private String getPassword(String cadenaDes) {
		String pwd = null;
		if (cadenaDes != null) {
			int indexIni = cadenaDes.indexOf("&");
			pwd=getUsername(cadenaDes.substring(indexIni+1));
		}
		//logger.debug("pwd " + pwd);
		return pwd;
	}*/

	private String getUsername(String cadenaDes) {
		String username = null;
		if (cadenaDes != null) {
			int index = cadenaDes.indexOf('=');
			int indexsep = cadenaDes.indexOf('&');
			username = cadenaDes.substring(index + 1, indexsep);

		}
		//logger.debug("username " + username);
		return username;
	}

	/*private String getAAAMMDD() {
		return UtilDate.convertirFechaString(UtilDate.diaActual(),"yyyyMMdd");
	}*/


	
	public void setLoginService(LoginService loginService){
		this.loginService=loginService;
	}
	   
}