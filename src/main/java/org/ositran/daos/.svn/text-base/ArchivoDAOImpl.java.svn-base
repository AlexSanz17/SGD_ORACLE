package org.osinerg.daos;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityNotFoundException;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;

import org.apache.log4j.Logger;
import org.osinerg.utils.Constantes;
import org.springframework.stereotype.Repository;

import com.btg.osinergmin.siged.domain.Archivo;

@Repository
public class ArchivoDAOImpl implements ArchivoDAO{
	
	private static Logger _log=Logger.getLogger(ArchivoDAOImpl.class);
	private EntityManager em;

	// ////////////////////////////////
	// Methods //
	// ////////////////////////////////
	public Archivo buscarObjPor(Integer iIdDocumento,String sNombre){
		Archivo objArchivo=null;
		try{
			objArchivo=(Archivo) em.createNamedQuery("Archivo.findByCriteria").setParameter("iddoc",iIdDocumento).setParameter("nombre",sNombre).getSingleResult();
		}catch(NoResultException e){
			_log.error(e.getMessage());
		}
		return objArchivo;
	}

	public Archivo buscarObjPorId(Integer iIdArchivo){
		Archivo objArchivo=null;
		try{
			objArchivo=em.find(Archivo.class,iIdArchivo);
			em.refresh(objArchivo);
		}catch(EntityNotFoundException e){
			_log.error(e.getMessage(),e);
		}
		return objArchivo;
	}

	@SuppressWarnings("unchecked")
	public List<Archivo> buscarPorAutor(Integer idAutor, Integer idDocumento){
		return em.createNamedQuery("Archivo.buscarActivosPorAutor").setParameter("idUsuario", idAutor).setParameter("idDocumento", idDocumento)
		.setParameter("estado", Constantes.ESTADO_ACTIVO).getResultList();
	}
	
	public Archivo guardarObj(Archivo objArchivo){
		if(objArchivo.getRutaAlfresco() != null){
			String sql = "SELECT COUNT(ar.idArchivo) FROM Archivo ar WHERE LOWER(ar.rutaAlfresco) = :ruta AND ar.documento.idDocumento = :idDocumento ";
			Long numero = (Long)em.createQuery(sql).setParameter("ruta", objArchivo.getRutaAlfresco().toLowerCase())
							.setParameter("idDocumento", objArchivo.getDocumento().getIdDocumento()).getSingleResult();
			if(numero != null && numero > 0l){
				sql = "SELECT ar FROM Archivo ar WHERE LOWER(ar.rutaAlfresco) = :ruta AND ar.documento.idDocumento = :idDocumento ";
				Archivo archivo = (Archivo)em.createQuery(sql).setParameter("ruta", objArchivo.getRutaAlfresco().toLowerCase())
									.setParameter("idDocumento", objArchivo.getDocumento().getIdDocumento())
									.getResultList().get(0);
				
				archivo.setEstado(objArchivo.getEstado());
				archivo.setAutor(objArchivo.getAutor());
				em.merge(archivo);
				em.flush();
				em.refresh(archivo);
				
				archivo.setRutaArchivoPdf(objArchivo.getRutaArchivoPdf());
				archivo.setNombre(objArchivo.getNombre());
				return archivo;
			}
		}
		if(objArchivo.getIdArchivo()==null){
			em.persist(objArchivo);
			em.flush();
			em.refresh(objArchivo);
		}else{
			em.merge(objArchivo);
			em.flush();
		}
		return objArchivo;
	}

	@SuppressWarnings("unchecked")
	public List<Archivo> checkEstadoDigitalizacion(Integer iIdDoc){
		return em.createNamedQuery("Archivo.checkEstadoDigitalizacion").setParameter("iddoc",iIdDoc).getResultList();
	}

	@SuppressWarnings("unchecked")
	public List<Archivo> findByIdDocumentoOrderDesc(Integer iIdExpediente,Integer iIdDocumento,String sRol){
		if(sRol!=null&&sRol.equals(Constantes.ROL_QAS)){
			return em.createNamedQuery("Archivo.findByIdDocumentoOrderDescQAS").setParameter("idexpediente",iIdExpediente).setParameter("iddocumento",iIdDocumento).getResultList();
		}
		return em.createNamedQuery("Archivo.findByIdDocumentoOrderDesc").setParameter("idexpediente",iIdExpediente).setParameter("iddocumento",iIdDocumento).getResultList();
	}

	@SuppressWarnings("unchecked")
	public List<Archivo> findByCriteria(Integer iIdDoc,String strNombre,SearchMode sm){
		List<Archivo> lstArchivo=null;
		switch(sm){
		case LEFT_MATCH:
			strNombre=strNombre+'%';
			break;
		case ANYWHERE_MATCH:
			strNombre='%'+strNombre+'%';
			break;
		case RIGHT_MATCH:
			strNombre='%'+strNombre;
			break;
		default:
			break;
		}
		_log.debug(iIdDoc+","+strNombre);
		lstArchivo=em.createNamedQuery("Archivo.findByCriteria2").setParameter("iddoc",iIdDoc).setParameter("nombre",strNombre).getResultList();
		if(lstArchivo!=null){
			_log.debug("Archivos encontrados ["+lstArchivo.size()+"]");
		}else{
			_log.debug("No se encontraron archivos");
		}
		return lstArchivo;
	}

	@SuppressWarnings("unchecked")
	public List<Archivo> findByEstado(char estado){
		return em.createNamedQuery("Archivo.findByEstadodigitalizacion").setParameter("estadodigitalizacion",estado).getResultList();
	}

	@SuppressWarnings("unchecked")
	public List<Archivo> findByIdDocumento(Integer iIdDoc){
		return em.createNamedQuery("Archivo.findByIdDocumento").setParameter("estado", Constantes.ESTADO_ACTIVO).setParameter("iddoc",iIdDoc).getResultList();
	}

	public int updateEstado(Integer iIdArchivo,Character cEstado){
		return em.createNamedQuery("Archivo.updateEstado").setParameter("estado",cEstado).setParameter("idarchivo",iIdArchivo).executeUpdate();
	}

   @SuppressWarnings("unchecked")
   @Override
   public List<Archivo> findlstByExpediente(Integer idExpediente) {
      try {
         return em.createNamedQuery("Archivo.findByExpediente").setParameter("idexpediente", idExpediente).getResultList();
      } catch (NoResultException nre) {
         _log.warn("No se encontro ningun archivo");

         return null;
      }
   }

	@PersistenceContext(unitName="sigedPU")
	public void setEm(EntityManager em){
		this.em=em;
	}

	@Override
	public Archivo findByArchivoPrincipalIdDocumento(Integer iIdDoc) {
		
		Archivo objArchivo=null;
		try{
			objArchivo=(Archivo) em.createNamedQuery("Archivo.findByArchivoPrincipalIdDocumento").setParameter("estado", Constantes.ESTADO_ACTIVO).setParameter("iddoc",iIdDoc).setParameter("principal",Constantes.ARCHIVO_PRINCIPAL).getSingleResult();
		}catch(NoResultException e){
			_log.error(e.getMessage());
		}
		return objArchivo;		
	}
}
